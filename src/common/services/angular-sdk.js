// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "apiServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name apiServices
 * @module
 * @description
 *
 * The `apiServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("apiServices", ['ngResource']);

/**
 * @ngdoc object
 * @name apiServices.Badge
 * @header apiServices.Badge
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Badge` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Badge",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Badges/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Badge.instances.findById() instead.
            "prototype$__findById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Badge.instances.destroyById() instead.
            "prototype$__destroyById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.instances.updateById() instead.
            "prototype$__updateById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Badge.customers.findById() instead.
            "prototype$__findById__customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Badge.customers.destroyById() instead.
            "prototype$__destroyById__customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.customers.updateById() instead.
            "prototype$__updateById__customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Badge.customers.link() instead.
            "prototype$__link__customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Badge.customers.unlink() instead.
            "prototype$__unlink__customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.customers.exists() instead.
            "prototype$__exists__customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Badge.rule() instead.
            "prototype$__get__rule": {
              url: urlBase + "/Badges/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use Badge.rule.create() instead.
            "prototype$__create__rule": {
              url: urlBase + "/Badges/:id/rule",
              method: "POST",
            },

            // INTERNAL. Use Badge.rule.update() instead.
            "prototype$__update__rule": {
              url: urlBase + "/Badges/:id/rule",
              method: "PUT",
            },

            // INTERNAL. Use Badge.rule.destroy() instead.
            "prototype$__destroy__rule": {
              url: urlBase + "/Badges/:id/rule",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Badges/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Badge.instances() instead.
            "prototype$__get__instances": {
              isArray: true,
              url: urlBase + "/Badges/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use Badge.instances.create() instead.
            "prototype$__create__instances": {
              url: urlBase + "/Badges/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Badge.instances.destroyAll() instead.
            "prototype$__delete__instances": {
              url: urlBase + "/Badges/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.instances.count() instead.
            "prototype$__count__instances": {
              url: urlBase + "/Badges/:id/instances/count",
              method: "GET",
            },

            // INTERNAL. Use Badge.customers() instead.
            "prototype$__get__customers": {
              isArray: true,
              url: urlBase + "/Badges/:id/customers",
              method: "GET",
            },

            // INTERNAL. Use Badge.customers.create() instead.
            "prototype$__create__customers": {
              url: urlBase + "/Badges/:id/customers",
              method: "POST",
            },

            // INTERNAL. Use Badge.customers.destroyAll() instead.
            "prototype$__delete__customers": {
              url: urlBase + "/Badges/:id/customers",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.customers.count() instead.
            "prototype$__count__customers": {
              url: urlBase + "/Badges/:id/customers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#create
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Badges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#createMany
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Badges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#upsert
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Badges",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#replaceOrCreate
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Badges/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#exists
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Badges/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#findById
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Badges/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#replaceById
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Badges/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#find
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Badges",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#findOne
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Badges/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#updateAll
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Badges/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#deleteById
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Badges/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#count
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Badges/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#prototype$updateAttributes
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Badges/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Badge#createChangeStream
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Badges/change-stream",
              method: "POST",
            },

            // INTERNAL. Use BadgeInstance.badge() instead.
            "::get::BadgeInstance::badge": {
              url: urlBase + "/BadgeInstances/:id/badge",
              method: "GET",
            },

            // INTERNAL. Use Customer.badges.findById() instead.
            "::findById::Customer::badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.badges.destroyById() instead.
            "::destroyById::Customer::badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badges.updateById() instead.
            "::updateById::Customer::badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.badges.link() instead.
            "::link::Customer::badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.badges.unlink() instead.
            "::unlink::Customer::badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badges.exists() instead.
            "::exists::Customer::badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Customer.badges() instead.
            "::get::Customer::badges": {
              isArray: true,
              url: urlBase + "/Customers/:id/badges",
              method: "GET",
            },

            // INTERNAL. Use Customer.badges.create() instead.
            "::create::Customer::badges": {
              url: urlBase + "/Customers/:id/badges",
              method: "POST",
            },

            // INTERNAL. Use Customer.badges.createMany() instead.
            "::createMany::Customer::badges": {
              isArray: true,
              url: urlBase + "/Customers/:id/badges",
              method: "POST",
            },

            // INTERNAL. Use Customer.badges.destroyAll() instead.
            "::delete::Customer::badges": {
              url: urlBase + "/Customers/:id/badges",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badges.count() instead.
            "::count::Customer::badges": {
              url: urlBase + "/Customers/:id/badges/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Badge#patchOrCreate
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Badge#updateOrCreate
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Badge#update
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Badge#destroyById
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Badge#removeById
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Badge#patchAttributes
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Badge#modelName
        * @propertyOf apiServices.Badge
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Badge`.
        */
        R.modelName = "Badge";

    /**
     * @ngdoc object
     * @name apiServices.Badge.instances
     * @header apiServices.Badge.instances
     * @object
     * @description
     *
     * The object `Badge.instances` groups methods
     * manipulating `BadgeInstance` instances related to `Badge`.
     *
     * Call {@link apiServices.Badge#instances Badge.instances()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Badge#instances
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Queries instances of Badge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.instances = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::get::Badge::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.instances#count
             * @methodOf apiServices.Badge.instances
             *
             * @description
             *
             * Counts instances of Badge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.instances.count = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::count::Badge::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.instances#create
             * @methodOf apiServices.Badge.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.instances.create = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::create::Badge::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.instances#createMany
             * @methodOf apiServices.Badge.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.instances.createMany = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::createMany::Badge::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.instances#destroyAll
             * @methodOf apiServices.Badge.instances
             *
             * @description
             *
             * Deletes all instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyAll = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::delete::Badge::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.instances#destroyById
             * @methodOf apiServices.Badge.instances
             *
             * @description
             *
             * Delete a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyById = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::destroyById::Badge::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.instances#findById
             * @methodOf apiServices.Badge.instances
             *
             * @description
             *
             * Find a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.instances.findById = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::findById::Badge::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.instances#updateById
             * @methodOf apiServices.Badge.instances
             *
             * @description
             *
             * Update a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.instances.updateById = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::updateById::Badge::instances"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Badge.customers
     * @header apiServices.Badge.customers
     * @object
     * @description
     *
     * The object `Badge.customers` groups methods
     * manipulating `Customer` instances related to `Badge`.
     *
     * Call {@link apiServices.Badge#customers Badge.customers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Badge#customers
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Queries customers of Badge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customers = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#count
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Counts customers of Badge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.customers.count = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::count::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#create
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Creates a new instance in customers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customers.create = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::create::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#createMany
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Creates a new instance in customers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customers.createMany = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::createMany::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#destroyAll
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Deletes all customers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.customers.destroyAll = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::delete::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#destroyById
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Delete a related item by id for customers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.customers.destroyById = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::destroyById::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#exists
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Check the existence of customers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customers.exists = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::exists::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#findById
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Find a related item by id for customers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customers.findById = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::findById::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#link
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Add a related item by id for customers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customers.link = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::link::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#unlink
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Remove the customers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.customers.unlink = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::unlink::Badge::customers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.customers#updateById
             * @methodOf apiServices.Badge.customers
             *
             * @description
             *
             * Update a related item by id for customers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for customers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customers.updateById = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::updateById::Badge::customers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Badge.rule
     * @header apiServices.Badge.rule
     * @object
     * @description
     *
     * The object `Badge.rule` groups methods
     * manipulating `Rule` instances related to `Badge`.
     *
     * Call {@link apiServices.Badge#rule Badge.rule()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Badge#rule
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Fetches hasOne relation rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::get::Badge::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.rule#create
             * @methodOf apiServices.Badge.rule
             *
             * @description
             *
             * Creates a new instance in rule of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule.create = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::create::Badge::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.rule#createMany
             * @methodOf apiServices.Badge.rule
             *
             * @description
             *
             * Creates a new instance in rule of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule.createMany = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::createMany::Badge::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.rule#destroy
             * @methodOf apiServices.Badge.rule
             *
             * @description
             *
             * Deletes rule of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rule.destroy = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::destroy::Badge::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge.rule#update
             * @methodOf apiServices.Badge.rule
             *
             * @description
             *
             * Update rule of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule.update = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::update::Badge::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Badge#lastModifiedBy
             * @methodOf apiServices.Badge
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Badge::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Instance
 * @header apiServices.Instance
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Instance` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Instance",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Instances/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Instance.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/Instances/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use Instance.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Instances/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#create
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Instances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#createMany
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Instances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#upsert
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Instances",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#replaceOrCreate
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Instances/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#exists
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Instances/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#findById
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Instances/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#replaceById
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Instances/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#find
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Instances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#findOne
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Instances/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#updateAll
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Instances/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#deleteById
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Instances/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#count
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Instances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#prototype$updateAttributes
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Instances/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Instance#createChangeStream
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Instances/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Instance#patchOrCreate
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Instance#updateOrCreate
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Instance#update
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Instance#destroyById
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Instance#removeById
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Instance#patchAttributes
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Instance` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Instance#modelName
        * @propertyOf apiServices.Instance
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Instance`.
        */
        R.modelName = "Instance";


            /**
             * @ngdoc method
             * @name apiServices.Instance#customer
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::Instance::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Instance#lastModifiedBy
             * @methodOf apiServices.Instance
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Instance::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.BadgeInstance
 * @header apiServices.BadgeInstance
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BadgeInstance` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BadgeInstance",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/BadgeInstances/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use BadgeInstance.badge() instead.
            "prototype$__get__badge": {
              url: urlBase + "/BadgeInstances/:id/badge",
              method: "GET",
            },

            // INTERNAL. Use BadgeInstance.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/BadgeInstances/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use BadgeInstance.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/BadgeInstances/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#create
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BadgeInstances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#createMany
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BadgeInstances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#upsert
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/BadgeInstances",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#replaceOrCreate
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/BadgeInstances/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#exists
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BadgeInstances/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#findById
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BadgeInstances/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#replaceById
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/BadgeInstances/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#find
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BadgeInstances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#findOne
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BadgeInstances/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#updateAll
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/BadgeInstances/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#deleteById
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BadgeInstances/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#count
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BadgeInstances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#prototype$updateAttributes
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/BadgeInstances/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#createChangeStream
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BadgeInstances/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Badge.instances.findById() instead.
            "::findById::Badge::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Badge.instances.destroyById() instead.
            "::destroyById::Badge::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.instances.updateById() instead.
            "::updateById::Badge::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Badge.instances() instead.
            "::get::Badge::instances": {
              isArray: true,
              url: urlBase + "/Badges/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use Badge.instances.create() instead.
            "::create::Badge::instances": {
              url: urlBase + "/Badges/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Badge.instances.createMany() instead.
            "::createMany::Badge::instances": {
              isArray: true,
              url: urlBase + "/Badges/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Badge.instances.destroyAll() instead.
            "::delete::Badge::instances": {
              url: urlBase + "/Badges/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.instances.count() instead.
            "::count::Badge::instances": {
              url: urlBase + "/Badges/:id/instances/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.badgeInstances.findById() instead.
            "::findById::Customer::badgeInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badgeInstances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.badgeInstances.destroyById() instead.
            "::destroyById::Customer::badgeInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badgeInstances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badgeInstances.updateById() instead.
            "::updateById::Customer::badgeInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badgeInstances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.badgeInstances() instead.
            "::get::Customer::badgeInstances": {
              isArray: true,
              url: urlBase + "/Customers/:id/badgeInstances",
              method: "GET",
            },

            // INTERNAL. Use Customer.badgeInstances.create() instead.
            "::create::Customer::badgeInstances": {
              url: urlBase + "/Customers/:id/badgeInstances",
              method: "POST",
            },

            // INTERNAL. Use Customer.badgeInstances.createMany() instead.
            "::createMany::Customer::badgeInstances": {
              isArray: true,
              url: urlBase + "/Customers/:id/badgeInstances",
              method: "POST",
            },

            // INTERNAL. Use Customer.badgeInstances.destroyAll() instead.
            "::delete::Customer::badgeInstances": {
              url: urlBase + "/Customers/:id/badgeInstances",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badgeInstances.count() instead.
            "::count::Customer::badgeInstances": {
              url: urlBase + "/Customers/:id/badgeInstances/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#patchOrCreate
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#updateOrCreate
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#update
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#destroyById
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#removeById
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#patchAttributes
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.BadgeInstance#modelName
        * @propertyOf apiServices.BadgeInstance
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BadgeInstance`.
        */
        R.modelName = "BadgeInstance";


            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#badge
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Fetches belongsTo relation badge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R.badge = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::get::BadgeInstance::badge"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#customer
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::BadgeInstance::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.BadgeInstance#lastModifiedBy
             * @methodOf apiServices.BadgeInstance
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::BadgeInstance::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Customer
 * @header apiServices.Customer
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Customer` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Customer",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Customers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$__findById__accessTokens
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$__destroyById__accessTokens
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$__updateById__accessTokens
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.badgeInstances.findById() instead.
            "prototype$__findById__badgeInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badgeInstances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.badgeInstances.destroyById() instead.
            "prototype$__destroyById__badgeInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badgeInstances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badgeInstances.updateById() instead.
            "prototype$__updateById__badgeInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badgeInstances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.badges.findById() instead.
            "prototype$__findById__badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.badges.destroyById() instead.
            "prototype$__destroyById__badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badges.updateById() instead.
            "prototype$__updateById__badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.badges.link() instead.
            "prototype$__link__badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.badges.unlink() instead.
            "prototype$__unlink__badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badges.exists() instead.
            "prototype$__exists__badges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/badges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Customer.product() instead.
            "prototype$__get__product": {
              url: urlBase + "/Customers/:id/product",
              method: "GET",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.findById() instead.
            "prototype$__findById__scoreUnitInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/scoreUnitInstances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.destroyById() instead.
            "prototype$__destroyById__scoreUnitInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/scoreUnitInstances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.updateById() instead.
            "prototype$__updateById__scoreUnitInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/scoreUnitInstances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.levels.findById() instead.
            "prototype$__findById__levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.levels.destroyById() instead.
            "prototype$__destroyById__levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.levels.updateById() instead.
            "prototype$__updateById__levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.levels.link() instead.
            "prototype$__link__levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.levels.unlink() instead.
            "prototype$__unlink__levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.levels.exists() instead.
            "prototype$__exists__levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Customer.questInstances.findById() instead.
            "prototype$__findById__questInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/questInstances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.questInstances.destroyById() instead.
            "prototype$__destroyById__questInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/questInstances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.questInstances.updateById() instead.
            "prototype$__updateById__questInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/questInstances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.quests.findById() instead.
            "prototype$__findById__quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.quests.destroyById() instead.
            "prototype$__destroyById__quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.quests.updateById() instead.
            "prototype$__updateById__quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.quests.link() instead.
            "prototype$__link__quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.quests.unlink() instead.
            "prototype$__unlink__quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.quests.exists() instead.
            "prototype$__exists__quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Customer.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Customers/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$__get__accessTokens
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Queries accessTokens of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Customers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$__create__accessTokens
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Customers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$__delete__accessTokens
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Customers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$__count__accessTokens
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Counts accessTokens of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Customers/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.badgeInstances() instead.
            "prototype$__get__badgeInstances": {
              isArray: true,
              url: urlBase + "/Customers/:id/badgeInstances",
              method: "GET",
            },

            // INTERNAL. Use Customer.badgeInstances.create() instead.
            "prototype$__create__badgeInstances": {
              url: urlBase + "/Customers/:id/badgeInstances",
              method: "POST",
            },

            // INTERNAL. Use Customer.badgeInstances.destroyAll() instead.
            "prototype$__delete__badgeInstances": {
              url: urlBase + "/Customers/:id/badgeInstances",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badgeInstances.count() instead.
            "prototype$__count__badgeInstances": {
              url: urlBase + "/Customers/:id/badgeInstances/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.badges() instead.
            "prototype$__get__badges": {
              isArray: true,
              url: urlBase + "/Customers/:id/badges",
              method: "GET",
            },

            // INTERNAL. Use Customer.badges.create() instead.
            "prototype$__create__badges": {
              url: urlBase + "/Customers/:id/badges",
              method: "POST",
            },

            // INTERNAL. Use Customer.badges.destroyAll() instead.
            "prototype$__delete__badges": {
              url: urlBase + "/Customers/:id/badges",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.badges.count() instead.
            "prototype$__count__badges": {
              url: urlBase + "/Customers/:id/badges/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.scoreUnitInstances() instead.
            "prototype$__get__scoreUnitInstances": {
              isArray: true,
              url: urlBase + "/Customers/:id/scoreUnitInstances",
              method: "GET",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.create() instead.
            "prototype$__create__scoreUnitInstances": {
              url: urlBase + "/Customers/:id/scoreUnitInstances",
              method: "POST",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.destroyAll() instead.
            "prototype$__delete__scoreUnitInstances": {
              url: urlBase + "/Customers/:id/scoreUnitInstances",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.count() instead.
            "prototype$__count__scoreUnitInstances": {
              url: urlBase + "/Customers/:id/scoreUnitInstances/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.levels() instead.
            "prototype$__get__levels": {
              isArray: true,
              url: urlBase + "/Customers/:id/levels",
              method: "GET",
            },

            // INTERNAL. Use Customer.levels.create() instead.
            "prototype$__create__levels": {
              url: urlBase + "/Customers/:id/levels",
              method: "POST",
            },

            // INTERNAL. Use Customer.levels.destroyAll() instead.
            "prototype$__delete__levels": {
              url: urlBase + "/Customers/:id/levels",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.levels.count() instead.
            "prototype$__count__levels": {
              url: urlBase + "/Customers/:id/levels/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.questInstances() instead.
            "prototype$__get__questInstances": {
              isArray: true,
              url: urlBase + "/Customers/:id/questInstances",
              method: "GET",
            },

            // INTERNAL. Use Customer.questInstances.create() instead.
            "prototype$__create__questInstances": {
              url: urlBase + "/Customers/:id/questInstances",
              method: "POST",
            },

            // INTERNAL. Use Customer.questInstances.destroyAll() instead.
            "prototype$__delete__questInstances": {
              url: urlBase + "/Customers/:id/questInstances",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.questInstances.count() instead.
            "prototype$__count__questInstances": {
              url: urlBase + "/Customers/:id/questInstances/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.quests() instead.
            "prototype$__get__quests": {
              isArray: true,
              url: urlBase + "/Customers/:id/quests",
              method: "GET",
            },

            // INTERNAL. Use Customer.quests.create() instead.
            "prototype$__create__quests": {
              url: urlBase + "/Customers/:id/quests",
              method: "POST",
            },

            // INTERNAL. Use Customer.quests.destroyAll() instead.
            "prototype$__delete__quests": {
              url: urlBase + "/Customers/:id/quests",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.quests.count() instead.
            "prototype$__count__quests": {
              url: urlBase + "/Customers/:id/quests/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#create
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Customers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#createMany
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Customers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#upsert
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Customers",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#replaceOrCreate
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Customers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#exists
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Customers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#findById
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Customers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#replaceById
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Customers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#find
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Customers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#findOne
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Customers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#updateAll
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Customers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#deleteById
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Customers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#count
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Customers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$updateAttributes
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Customers/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#createChangeStream
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Customers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#login
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Customers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#logout
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Customers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#confirm
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Customers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#resetPassword
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Customers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$triggerAsHim
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             *  - `trigger` – `{Object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$triggerAsHim": {
              url: urlBase + "/Customers/:id/triggerAsHim",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#prototype$giveScoreUnits
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `scoreUnitId` – `{string=}` -
             *
             *  - `quantity` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$giveScoreUnits": {
              url: urlBase + "/Customers/:id/giveScoreUnits",
              method: "POST",
            },

            // INTERNAL. Use Badge.customers.findById() instead.
            "::findById::Badge::customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Badge.customers.destroyById() instead.
            "::destroyById::Badge::customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.customers.updateById() instead.
            "::updateById::Badge::customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Badge.customers.link() instead.
            "::link::Badge::customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Badge.customers.unlink() instead.
            "::unlink::Badge::customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.customers.exists() instead.
            "::exists::Badge::customers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Badges/:id/customers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Badge.customers() instead.
            "::get::Badge::customers": {
              isArray: true,
              url: urlBase + "/Badges/:id/customers",
              method: "GET",
            },

            // INTERNAL. Use Badge.customers.create() instead.
            "::create::Badge::customers": {
              url: urlBase + "/Badges/:id/customers",
              method: "POST",
            },

            // INTERNAL. Use Badge.customers.createMany() instead.
            "::createMany::Badge::customers": {
              isArray: true,
              url: urlBase + "/Badges/:id/customers",
              method: "POST",
            },

            // INTERNAL. Use Badge.customers.destroyAll() instead.
            "::delete::Badge::customers": {
              url: urlBase + "/Badges/:id/customers",
              method: "DELETE",
            },

            // INTERNAL. Use Badge.customers.count() instead.
            "::count::Badge::customers": {
              url: urlBase + "/Badges/:id/customers/count",
              method: "GET",
            },

            // INTERNAL. Use Instance.customer() instead.
            "::get::Instance::customer": {
              url: urlBase + "/Instances/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use BadgeInstance.customer() instead.
            "::get::BadgeInstance::customer": {
              url: urlBase + "/BadgeInstances/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use Event.customer() instead.
            "::get::Event::customer": {
              url: urlBase + "/Events/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.customer() instead.
            "::get::RuleInstance::customer": {
              url: urlBase + "/RuleInstances/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitSeat.customer() instead.
            "::get::ScoreUnitSeat::customer": {
              url: urlBase + "/ScoreUnitSeats/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitInstance.customer() instead.
            "::get::ScoreUnitInstance::customer": {
              url: urlBase + "/ScoreUnitInstances/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.customer() instead.
            "::get::QuestInstance::customer": {
              url: urlBase + "/QuestInstances/:id/customer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Customer#getCurrent
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Customers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Customer#patchOrCreate
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Customer#updateOrCreate
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Customer#update
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Customer#destroyById
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Customer#removeById
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Customer#patchAttributes
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name apiServices.Customer#getCachedCurrent
         * @methodOf apiServices.Customer
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link apiServices.Customer#login} or
         * {@link apiServices.Customer#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Customer instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name apiServices.Customer#isAuthenticated
         * @methodOf apiServices.Customer
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name apiServices.Customer#getCurrentId
         * @methodOf apiServices.Customer
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name apiServices.Customer#modelName
        * @propertyOf apiServices.Customer
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Customer`.
        */
        R.modelName = "Customer";

    /**
     * @ngdoc object
     * @name apiServices.Customer.badgeInstances
     * @header apiServices.Customer.badgeInstances
     * @object
     * @description
     *
     * The object `Customer.badgeInstances` groups methods
     * manipulating `BadgeInstance` instances related to `Customer`.
     *
     * Call {@link apiServices.Customer#badgeInstances Customer.badgeInstances()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Customer#badgeInstances
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Queries badgeInstances of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.badgeInstances = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::get::Customer::badgeInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badgeInstances#count
             * @methodOf apiServices.Customer.badgeInstances
             *
             * @description
             *
             * Counts badgeInstances of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.badgeInstances.count = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::count::Customer::badgeInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badgeInstances#create
             * @methodOf apiServices.Customer.badgeInstances
             *
             * @description
             *
             * Creates a new instance in badgeInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.badgeInstances.create = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::create::Customer::badgeInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badgeInstances#createMany
             * @methodOf apiServices.Customer.badgeInstances
             *
             * @description
             *
             * Creates a new instance in badgeInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.badgeInstances.createMany = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::createMany::Customer::badgeInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badgeInstances#destroyAll
             * @methodOf apiServices.Customer.badgeInstances
             *
             * @description
             *
             * Deletes all badgeInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.badgeInstances.destroyAll = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::delete::Customer::badgeInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badgeInstances#destroyById
             * @methodOf apiServices.Customer.badgeInstances
             *
             * @description
             *
             * Delete a related item by id for badgeInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for badgeInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.badgeInstances.destroyById = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::destroyById::Customer::badgeInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badgeInstances#findById
             * @methodOf apiServices.Customer.badgeInstances
             *
             * @description
             *
             * Find a related item by id for badgeInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for badgeInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.badgeInstances.findById = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::findById::Customer::badgeInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badgeInstances#updateById
             * @methodOf apiServices.Customer.badgeInstances
             *
             * @description
             *
             * Update a related item by id for badgeInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for badgeInstances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BadgeInstance` object.)
             * </em>
             */
        R.badgeInstances.updateById = function() {
          var TargetResource = $injector.get("BadgeInstance");
          var action = TargetResource["::updateById::Customer::badgeInstances"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Customer.badges
     * @header apiServices.Customer.badges
     * @object
     * @description
     *
     * The object `Customer.badges` groups methods
     * manipulating `Badge` instances related to `Customer`.
     *
     * Call {@link apiServices.Customer#badges Customer.badges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Customer#badges
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Queries badges of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R.badges = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::get::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#count
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Counts badges of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.badges.count = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::count::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#create
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Creates a new instance in badges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R.badges.create = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::create::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#createMany
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Creates a new instance in badges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R.badges.createMany = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::createMany::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#destroyAll
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Deletes all badges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.badges.destroyAll = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::delete::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#destroyById
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Delete a related item by id for badges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for badges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.badges.destroyById = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::destroyById::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#exists
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Check the existence of badges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for badges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R.badges.exists = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::exists::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#findById
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Find a related item by id for badges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for badges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R.badges.findById = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::findById::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#link
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Add a related item by id for badges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for badges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R.badges.link = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::link::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#unlink
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Remove the badges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for badges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.badges.unlink = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::unlink::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.badges#updateById
             * @methodOf apiServices.Customer.badges
             *
             * @description
             *
             * Update a related item by id for badges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for badges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Badge` object.)
             * </em>
             */
        R.badges.updateById = function() {
          var TargetResource = $injector.get("Badge");
          var action = TargetResource["::updateById::Customer::badges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer#product
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Fetches belongsTo relation product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::Customer::product"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Customer.scoreUnitInstances
     * @header apiServices.Customer.scoreUnitInstances
     * @object
     * @description
     *
     * The object `Customer.scoreUnitInstances` groups methods
     * manipulating `ScoreUnitInstance` instances related to `Customer`.
     *
     * Call {@link apiServices.Customer#scoreUnitInstances Customer.scoreUnitInstances()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Customer#scoreUnitInstances
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Queries scoreUnitInstances of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.scoreUnitInstances = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::get::Customer::scoreUnitInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.scoreUnitInstances#count
             * @methodOf apiServices.Customer.scoreUnitInstances
             *
             * @description
             *
             * Counts scoreUnitInstances of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.scoreUnitInstances.count = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::count::Customer::scoreUnitInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.scoreUnitInstances#create
             * @methodOf apiServices.Customer.scoreUnitInstances
             *
             * @description
             *
             * Creates a new instance in scoreUnitInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.scoreUnitInstances.create = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::create::Customer::scoreUnitInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.scoreUnitInstances#createMany
             * @methodOf apiServices.Customer.scoreUnitInstances
             *
             * @description
             *
             * Creates a new instance in scoreUnitInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.scoreUnitInstances.createMany = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::createMany::Customer::scoreUnitInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.scoreUnitInstances#destroyAll
             * @methodOf apiServices.Customer.scoreUnitInstances
             *
             * @description
             *
             * Deletes all scoreUnitInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.scoreUnitInstances.destroyAll = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::delete::Customer::scoreUnitInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.scoreUnitInstances#destroyById
             * @methodOf apiServices.Customer.scoreUnitInstances
             *
             * @description
             *
             * Delete a related item by id for scoreUnitInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for scoreUnitInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.scoreUnitInstances.destroyById = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::destroyById::Customer::scoreUnitInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.scoreUnitInstances#findById
             * @methodOf apiServices.Customer.scoreUnitInstances
             *
             * @description
             *
             * Find a related item by id for scoreUnitInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for scoreUnitInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.scoreUnitInstances.findById = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::findById::Customer::scoreUnitInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.scoreUnitInstances#updateById
             * @methodOf apiServices.Customer.scoreUnitInstances
             *
             * @description
             *
             * Update a related item by id for scoreUnitInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for scoreUnitInstances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.scoreUnitInstances.updateById = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::updateById::Customer::scoreUnitInstances"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Customer.levels
     * @header apiServices.Customer.levels
     * @object
     * @description
     *
     * The object `Customer.levels` groups methods
     * manipulating `Level` instances related to `Customer`.
     *
     * Call {@link apiServices.Customer#levels Customer.levels()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Customer#levels
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Queries levels of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::get::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#count
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Counts levels of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.levels.count = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::count::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#create
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Creates a new instance in levels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.create = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::create::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#createMany
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Creates a new instance in levels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.createMany = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::createMany::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#destroyAll
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Deletes all levels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levels.destroyAll = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::delete::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#destroyById
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Delete a related item by id for levels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for levels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levels.destroyById = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::destroyById::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#exists
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Check the existence of levels relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for levels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.exists = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::exists::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#findById
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Find a related item by id for levels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for levels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.findById = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::findById::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#link
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Add a related item by id for levels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for levels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.link = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::link::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#unlink
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Remove the levels relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for levels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levels.unlink = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::unlink::Customer::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.levels#updateById
             * @methodOf apiServices.Customer.levels
             *
             * @description
             *
             * Update a related item by id for levels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for levels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.updateById = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::updateById::Customer::levels"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Customer.questInstances
     * @header apiServices.Customer.questInstances
     * @object
     * @description
     *
     * The object `Customer.questInstances` groups methods
     * manipulating `QuestInstance` instances related to `Customer`.
     *
     * Call {@link apiServices.Customer#questInstances Customer.questInstances()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Customer#questInstances
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Queries questInstances of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.questInstances = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::get::Customer::questInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.questInstances#count
             * @methodOf apiServices.Customer.questInstances
             *
             * @description
             *
             * Counts questInstances of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.questInstances.count = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::count::Customer::questInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.questInstances#create
             * @methodOf apiServices.Customer.questInstances
             *
             * @description
             *
             * Creates a new instance in questInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.questInstances.create = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::create::Customer::questInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.questInstances#createMany
             * @methodOf apiServices.Customer.questInstances
             *
             * @description
             *
             * Creates a new instance in questInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.questInstances.createMany = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::createMany::Customer::questInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.questInstances#destroyAll
             * @methodOf apiServices.Customer.questInstances
             *
             * @description
             *
             * Deletes all questInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.questInstances.destroyAll = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::delete::Customer::questInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.questInstances#destroyById
             * @methodOf apiServices.Customer.questInstances
             *
             * @description
             *
             * Delete a related item by id for questInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for questInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.questInstances.destroyById = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::destroyById::Customer::questInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.questInstances#findById
             * @methodOf apiServices.Customer.questInstances
             *
             * @description
             *
             * Find a related item by id for questInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for questInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.questInstances.findById = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::findById::Customer::questInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.questInstances#updateById
             * @methodOf apiServices.Customer.questInstances
             *
             * @description
             *
             * Update a related item by id for questInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for questInstances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.questInstances.updateById = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::updateById::Customer::questInstances"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Customer.quests
     * @header apiServices.Customer.quests
     * @object
     * @description
     *
     * The object `Customer.quests` groups methods
     * manipulating `Quest` instances related to `Customer`.
     *
     * Call {@link apiServices.Customer#quests Customer.quests()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Customer#quests
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Queries quests of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quests = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::get::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#count
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Counts quests of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.quests.count = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::count::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#create
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Creates a new instance in quests of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quests.create = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::create::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#createMany
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Creates a new instance in quests of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quests.createMany = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::createMany::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#destroyAll
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Deletes all quests of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.quests.destroyAll = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::delete::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#destroyById
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Delete a related item by id for quests.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for quests
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.quests.destroyById = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::destroyById::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#exists
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Check the existence of quests relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for quests
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quests.exists = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::exists::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#findById
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Find a related item by id for quests.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for quests
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quests.findById = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::findById::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#link
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Add a related item by id for quests.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for quests
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quests.link = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::link::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#unlink
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Remove the quests relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for quests
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.quests.unlink = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::unlink::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer.quests#updateById
             * @methodOf apiServices.Customer.quests
             *
             * @description
             *
             * Update a related item by id for quests.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for quests
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quests.updateById = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::updateById::Customer::quests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Customer#lastModifiedBy
             * @methodOf apiServices.Customer
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Customer::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Admin
 * @header apiServices.Admin
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Admin` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Admin",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Admins/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name apiServices.Admin#prototype$__findById__accessTokens
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#prototype$__destroyById__accessTokens
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#prototype$__updateById__accessTokens
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.ownedProducts.findById() instead.
            "prototype$__findById__ownedProducts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/ownedProducts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Admin.ownedProducts.destroyById() instead.
            "prototype$__destroyById__ownedProducts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/ownedProducts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.ownedProducts.updateById() instead.
            "prototype$__updateById__ownedProducts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/ownedProducts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.products.findById() instead.
            "prototype$__findById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use Admin.products.destroyById() instead.
            "prototype$__destroyById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.products.updateById() instead.
            "prototype$__updateById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.products.link() instead.
            "prototype$__link__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.products.unlink() instead.
            "prototype$__unlink__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.products.exists() instead.
            "prototype$__exists__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Admin.productAccesses.findById() instead.
            "prototype$__findById__productAccesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/productAccesses/:fk",
              method: "GET",
            },

            // INTERNAL. Use Admin.productAccesses.destroyById() instead.
            "prototype$__destroyById__productAccesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/productAccesses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.productAccesses.updateById() instead.
            "prototype$__updateById__productAccesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/productAccesses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Admins/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#prototype$__get__accessTokens
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Queries accessTokens of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Admins/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#prototype$__create__accessTokens
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#prototype$__delete__accessTokens
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#prototype$__count__accessTokens
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Counts accessTokens of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Admin.ownedProducts() instead.
            "prototype$__get__ownedProducts": {
              isArray: true,
              url: urlBase + "/Admins/:id/ownedProducts",
              method: "GET",
            },

            // INTERNAL. Use Admin.ownedProducts.create() instead.
            "prototype$__create__ownedProducts": {
              url: urlBase + "/Admins/:id/ownedProducts",
              method: "POST",
            },

            // INTERNAL. Use Admin.ownedProducts.destroyAll() instead.
            "prototype$__delete__ownedProducts": {
              url: urlBase + "/Admins/:id/ownedProducts",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.ownedProducts.count() instead.
            "prototype$__count__ownedProducts": {
              url: urlBase + "/Admins/:id/ownedProducts/count",
              method: "GET",
            },

            // INTERNAL. Use Admin.products() instead.
            "prototype$__get__products": {
              isArray: true,
              url: urlBase + "/Admins/:id/products",
              method: "GET",
            },

            // INTERNAL. Use Admin.products.create() instead.
            "prototype$__create__products": {
              url: urlBase + "/Admins/:id/products",
              method: "POST",
            },

            // INTERNAL. Use Admin.products.destroyAll() instead.
            "prototype$__delete__products": {
              url: urlBase + "/Admins/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.products.count() instead.
            "prototype$__count__products": {
              url: urlBase + "/Admins/:id/products/count",
              method: "GET",
            },

            // INTERNAL. Use Admin.productAccesses() instead.
            "prototype$__get__productAccesses": {
              isArray: true,
              url: urlBase + "/Admins/:id/productAccesses",
              method: "GET",
            },

            // INTERNAL. Use Admin.productAccesses.create() instead.
            "prototype$__create__productAccesses": {
              url: urlBase + "/Admins/:id/productAccesses",
              method: "POST",
            },

            // INTERNAL. Use Admin.productAccesses.destroyAll() instead.
            "prototype$__delete__productAccesses": {
              url: urlBase + "/Admins/:id/productAccesses",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.productAccesses.count() instead.
            "prototype$__count__productAccesses": {
              url: urlBase + "/Admins/:id/productAccesses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#create
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Admins",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#createMany
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Admins",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#upsert
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Admins",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#replaceOrCreate
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Admins/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#exists
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Admins/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#findById
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Admins/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#replaceById
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Admins/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#find
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Admins",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#findOne
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Admins/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#updateAll
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Admins/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#deleteById
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Admins/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#count
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Admins/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#prototype$updateAttributes
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Admins/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#createChangeStream
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Admins/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#login
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Admins/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#logout
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Admins/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#confirm
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Admins/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#resetPassword
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Admins/reset",
              method: "POST",
            },

            // INTERNAL. Use Badge.lastModifiedBy() instead.
            "::get::Badge::lastModifiedBy": {
              url: urlBase + "/Badges/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Instance.lastModifiedBy() instead.
            "::get::Instance::lastModifiedBy": {
              url: urlBase + "/Instances/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use BadgeInstance.lastModifiedBy() instead.
            "::get::BadgeInstance::lastModifiedBy": {
              url: urlBase + "/BadgeInstances/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Customer.lastModifiedBy() instead.
            "::get::Customer::lastModifiedBy": {
              url: urlBase + "/Customers/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Admin.lastModifiedBy() instead.
            "::get::Admin::lastModifiedBy": {
              url: urlBase + "/Admins/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Product.owner() instead.
            "::get::Product::owner": {
              url: urlBase + "/Products/:id/owner",
              method: "GET",
            },

            // INTERNAL. Use Product.admins.findById() instead.
            "::findById::Product::admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/:fk",
              method: "GET",
            },

            // INTERNAL. Use Product.admins.destroyById() instead.
            "::destroyById::Product::admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.admins.updateById() instead.
            "::updateById::Product::admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.admins.link() instead.
            "::link::Product::admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.admins.unlink() instead.
            "::unlink::Product::admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.admins.exists() instead.
            "::exists::Product::admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Product.lastModifiedBy() instead.
            "::get::Product::lastModifiedBy": {
              url: urlBase + "/Products/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Product.admins() instead.
            "::get::Product::admins": {
              isArray: true,
              url: urlBase + "/Products/:id/admins",
              method: "GET",
            },

            // INTERNAL. Use Product.admins.create() instead.
            "::create::Product::admins": {
              url: urlBase + "/Products/:id/admins",
              method: "POST",
            },

            // INTERNAL. Use Product.admins.createMany() instead.
            "::createMany::Product::admins": {
              isArray: true,
              url: urlBase + "/Products/:id/admins",
              method: "POST",
            },

            // INTERNAL. Use Product.admins.destroyAll() instead.
            "::delete::Product::admins": {
              url: urlBase + "/Products/:id/admins",
              method: "DELETE",
            },

            // INTERNAL. Use Product.admins.count() instead.
            "::count::Product::admins": {
              url: urlBase + "/Products/:id/admins/count",
              method: "GET",
            },

            // INTERNAL. Use ProductAccess.admin() instead.
            "::get::ProductAccess::admin": {
              url: urlBase + "/ProductAccesses/:id/admin",
              method: "GET",
            },

            // INTERNAL. Use ProductAccess.lastModifiedBy() instead.
            "::get::ProductAccess::lastModifiedBy": {
              url: urlBase + "/ProductAccesses/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Event.lastModifiedBy() instead.
            "::get::Event::lastModifiedBy": {
              url: urlBase + "/Events/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Gameplay.lastModifiedBy() instead.
            "::get::Gameplay::lastModifiedBy": {
              url: urlBase + "/Gameplays/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Good.lastModifiedBy() instead.
            "::get::Good::lastModifiedBy": {
              url: urlBase + "/Goods/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Coupon.lastModifiedBy() instead.
            "::get::Coupon::lastModifiedBy": {
              url: urlBase + "/Coupons/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Unlock.lastModifiedBy() instead.
            "::get::Unlock::lastModifiedBy": {
              url: urlBase + "/Unlocks/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Level.lastModifiedBy() instead.
            "::get::Level::lastModifiedBy": {
              url: urlBase + "/Levels/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Listener.lastModifiedBy() instead.
            "::get::Listener::lastModifiedBy": {
              url: urlBase + "/Listeners/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Rule.lastModifiedBy() instead.
            "::get::Rule::lastModifiedBy": {
              url: urlBase + "/Rules/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Trigger.lastModifiedBy() instead.
            "::get::Trigger::lastModifiedBy": {
              url: urlBase + "/Triggers/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.lastModifiedBy() instead.
            "::get::RuleInstance::lastModifiedBy": {
              url: urlBase + "/RuleInstances/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use RuleHistory.author() instead.
            "::get::RuleHistory::author": {
              url: urlBase + "/RuleHistories/:id/author",
              method: "GET",
            },

            // INTERNAL. Use RuleHistory.lastModifiedBy() instead.
            "::get::RuleHistory::lastModifiedBy": {
              url: urlBase + "/RuleHistories/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.lastModifiedBy() instead.
            "::get::ScoreUnit::lastModifiedBy": {
              url: urlBase + "/ScoreUnits/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitSeat.lastModifiedBy() instead.
            "::get::ScoreUnitSeat::lastModifiedBy": {
              url: urlBase + "/ScoreUnitSeats/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitInstance.lastModifiedBy() instead.
            "::get::ScoreUnitInstance::lastModifiedBy": {
              url: urlBase + "/ScoreUnitInstances/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Segment.lastModifiedBy() instead.
            "::get::Segment::lastModifiedBy": {
              url: urlBase + "/Segments/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Quest.lastModifiedBy() instead.
            "::get::Quest::lastModifiedBy": {
              url: urlBase + "/Quests/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Step.lastModifiedBy() instead.
            "::get::Step::lastModifiedBy": {
              url: urlBase + "/Steps/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use QuestHistory.author() instead.
            "::get::QuestHistory::author": {
              url: urlBase + "/QuestHistories/:id/author",
              method: "GET",
            },

            // INTERNAL. Use QuestHistory.lastModifiedBy() instead.
            "::get::QuestHistory::lastModifiedBy": {
              url: urlBase + "/QuestHistories/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.lastModifiedBy() instead.
            "::get::QuestInstance::lastModifiedBy": {
              url: urlBase + "/QuestInstances/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Log.lastModifiedBy() instead.
            "::get::Log::lastModifiedBy": {
              url: urlBase + "/Logs/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Widget.lastModifiedBy() instead.
            "::get::Widget::lastModifiedBy": {
              url: urlBase + "/Widgets/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Admin#getCurrent
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Admins" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Admin#patchOrCreate
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Admin#updateOrCreate
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Admin#update
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Admin#destroyById
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Admin#removeById
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Admin#patchAttributes
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name apiServices.Admin#getCachedCurrent
         * @methodOf apiServices.Admin
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link apiServices.Admin#login} or
         * {@link apiServices.Admin#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Admin instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name apiServices.Admin#isAuthenticated
         * @methodOf apiServices.Admin
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name apiServices.Admin#getCurrentId
         * @methodOf apiServices.Admin
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name apiServices.Admin#modelName
        * @propertyOf apiServices.Admin
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Admin`.
        */
        R.modelName = "Admin";

    /**
     * @ngdoc object
     * @name apiServices.Admin.ownedProducts
     * @header apiServices.Admin.ownedProducts
     * @object
     * @description
     *
     * The object `Admin.ownedProducts` groups methods
     * manipulating `Product` instances related to `Admin`.
     *
     * Call {@link apiServices.Admin#ownedProducts Admin.ownedProducts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Admin#ownedProducts
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Queries ownedProducts of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.ownedProducts = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::Admin::ownedProducts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.ownedProducts#count
             * @methodOf apiServices.Admin.ownedProducts
             *
             * @description
             *
             * Counts ownedProducts of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.ownedProducts.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::Admin::ownedProducts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.ownedProducts#create
             * @methodOf apiServices.Admin.ownedProducts
             *
             * @description
             *
             * Creates a new instance in ownedProducts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.ownedProducts.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::Admin::ownedProducts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.ownedProducts#createMany
             * @methodOf apiServices.Admin.ownedProducts
             *
             * @description
             *
             * Creates a new instance in ownedProducts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.ownedProducts.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::Admin::ownedProducts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.ownedProducts#destroyAll
             * @methodOf apiServices.Admin.ownedProducts
             *
             * @description
             *
             * Deletes all ownedProducts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.ownedProducts.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::Admin::ownedProducts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.ownedProducts#destroyById
             * @methodOf apiServices.Admin.ownedProducts
             *
             * @description
             *
             * Delete a related item by id for ownedProducts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for ownedProducts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.ownedProducts.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::Admin::ownedProducts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.ownedProducts#findById
             * @methodOf apiServices.Admin.ownedProducts
             *
             * @description
             *
             * Find a related item by id for ownedProducts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for ownedProducts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.ownedProducts.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::Admin::ownedProducts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.ownedProducts#updateById
             * @methodOf apiServices.Admin.ownedProducts
             *
             * @description
             *
             * Update a related item by id for ownedProducts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for ownedProducts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.ownedProducts.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::Admin::ownedProducts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Admin.products
     * @header apiServices.Admin.products
     * @object
     * @description
     *
     * The object `Admin.products` groups methods
     * manipulating `Product` instances related to `Admin`.
     *
     * Call {@link apiServices.Admin#products Admin.products()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Admin#products
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Queries products of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#count
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Counts products of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.products.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#create
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#createMany
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#destroyAll
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Deletes all products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#destroyById
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Delete a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#exists
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Check the existence of products relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.exists = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::exists::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#findById
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Find a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#link
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Add a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.link = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::link::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#unlink
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Remove the products relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.unlink = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::unlink::Admin::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.products#updateById
             * @methodOf apiServices.Admin.products
             *
             * @description
             *
             * Update a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::Admin::products"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Admin.productAccesses
     * @header apiServices.Admin.productAccesses
     * @object
     * @description
     *
     * The object `Admin.productAccesses` groups methods
     * manipulating `ProductAccess` instances related to `Admin`.
     *
     * Call {@link apiServices.Admin#productAccesses Admin.productAccesses()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Admin#productAccesses
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Queries productAccesses of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.productAccesses = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::get::Admin::productAccesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.productAccesses#count
             * @methodOf apiServices.Admin.productAccesses
             *
             * @description
             *
             * Counts productAccesses of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.productAccesses.count = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::count::Admin::productAccesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.productAccesses#create
             * @methodOf apiServices.Admin.productAccesses
             *
             * @description
             *
             * Creates a new instance in productAccesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.productAccesses.create = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::create::Admin::productAccesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.productAccesses#createMany
             * @methodOf apiServices.Admin.productAccesses
             *
             * @description
             *
             * Creates a new instance in productAccesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.productAccesses.createMany = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::createMany::Admin::productAccesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.productAccesses#destroyAll
             * @methodOf apiServices.Admin.productAccesses
             *
             * @description
             *
             * Deletes all productAccesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.productAccesses.destroyAll = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::delete::Admin::productAccesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.productAccesses#destroyById
             * @methodOf apiServices.Admin.productAccesses
             *
             * @description
             *
             * Delete a related item by id for productAccesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for productAccesses
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.productAccesses.destroyById = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::destroyById::Admin::productAccesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.productAccesses#findById
             * @methodOf apiServices.Admin.productAccesses
             *
             * @description
             *
             * Find a related item by id for productAccesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for productAccesses
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.productAccesses.findById = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::findById::Admin::productAccesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin.productAccesses#updateById
             * @methodOf apiServices.Admin.productAccesses
             *
             * @description
             *
             * Update a related item by id for productAccesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for productAccesses
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.productAccesses.updateById = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::updateById::Admin::productAccesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Admin#lastModifiedBy
             * @methodOf apiServices.Admin
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Admin::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Product
 * @header apiServices.Product
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Product` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Product",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Products/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Product.owner() instead.
            "prototype$__get__owner": {
              url: urlBase + "/Products/:id/owner",
              method: "GET",
            },

            // INTERNAL. Use Product.accesses.findById() instead.
            "prototype$__findById__accesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/accesses/:fk",
              method: "GET",
            },

            // INTERNAL. Use Product.accesses.destroyById() instead.
            "prototype$__destroyById__accesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/accesses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.accesses.updateById() instead.
            "prototype$__updateById__accesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/accesses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.admins.findById() instead.
            "prototype$__findById__admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/:fk",
              method: "GET",
            },

            // INTERNAL. Use Product.admins.destroyById() instead.
            "prototype$__destroyById__admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.admins.updateById() instead.
            "prototype$__updateById__admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.admins.link() instead.
            "prototype$__link__admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.admins.unlink() instead.
            "prototype$__unlink__admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.admins.exists() instead.
            "prototype$__exists__admins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/admins/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Product.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Products/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Product.accesses() instead.
            "prototype$__get__accesses": {
              isArray: true,
              url: urlBase + "/Products/:id/accesses",
              method: "GET",
            },

            // INTERNAL. Use Product.accesses.create() instead.
            "prototype$__create__accesses": {
              url: urlBase + "/Products/:id/accesses",
              method: "POST",
            },

            // INTERNAL. Use Product.accesses.destroyAll() instead.
            "prototype$__delete__accesses": {
              url: urlBase + "/Products/:id/accesses",
              method: "DELETE",
            },

            // INTERNAL. Use Product.accesses.count() instead.
            "prototype$__count__accesses": {
              url: urlBase + "/Products/:id/accesses/count",
              method: "GET",
            },

            // INTERNAL. Use Product.admins() instead.
            "prototype$__get__admins": {
              isArray: true,
              url: urlBase + "/Products/:id/admins",
              method: "GET",
            },

            // INTERNAL. Use Product.admins.create() instead.
            "prototype$__create__admins": {
              url: urlBase + "/Products/:id/admins",
              method: "POST",
            },

            // INTERNAL. Use Product.admins.destroyAll() instead.
            "prototype$__delete__admins": {
              url: urlBase + "/Products/:id/admins",
              method: "DELETE",
            },

            // INTERNAL. Use Product.admins.count() instead.
            "prototype$__count__admins": {
              url: urlBase + "/Products/:id/admins/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#create
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Products",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#createMany
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Products",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#upsert
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Products",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#replaceOrCreate
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Products/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#exists
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Products/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#findById
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Products/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#replaceById
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Products/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#find
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Products",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#findOne
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Products/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#updateAll
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Products/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#deleteById
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Products/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#count
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Products/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#prototype$updateAttributes
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Products/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#createChangeStream
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Products/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Product#prototype$generateNewApiSecret
             * @methodOf apiServices.Product
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `apiSecret` – `{string=}` -
             */
            "prototype$generateNewApiSecret": {
              url: urlBase + "/Products/:id/generateNewApiSecret",
              method: "POST",
            },

            // INTERNAL. Use Customer.product() instead.
            "::get::Customer::product": {
              url: urlBase + "/Customers/:id/product",
              method: "GET",
            },

            // INTERNAL. Use Admin.ownedProducts.findById() instead.
            "::findById::Admin::ownedProducts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/ownedProducts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Admin.ownedProducts.destroyById() instead.
            "::destroyById::Admin::ownedProducts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/ownedProducts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.ownedProducts.updateById() instead.
            "::updateById::Admin::ownedProducts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/ownedProducts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.products.findById() instead.
            "::findById::Admin::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use Admin.products.destroyById() instead.
            "::destroyById::Admin::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.products.updateById() instead.
            "::updateById::Admin::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.products.link() instead.
            "::link::Admin::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.products.unlink() instead.
            "::unlink::Admin::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.products.exists() instead.
            "::exists::Admin::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/products/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Admin.ownedProducts() instead.
            "::get::Admin::ownedProducts": {
              isArray: true,
              url: urlBase + "/Admins/:id/ownedProducts",
              method: "GET",
            },

            // INTERNAL. Use Admin.ownedProducts.create() instead.
            "::create::Admin::ownedProducts": {
              url: urlBase + "/Admins/:id/ownedProducts",
              method: "POST",
            },

            // INTERNAL. Use Admin.ownedProducts.createMany() instead.
            "::createMany::Admin::ownedProducts": {
              isArray: true,
              url: urlBase + "/Admins/:id/ownedProducts",
              method: "POST",
            },

            // INTERNAL. Use Admin.ownedProducts.destroyAll() instead.
            "::delete::Admin::ownedProducts": {
              url: urlBase + "/Admins/:id/ownedProducts",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.ownedProducts.count() instead.
            "::count::Admin::ownedProducts": {
              url: urlBase + "/Admins/:id/ownedProducts/count",
              method: "GET",
            },

            // INTERNAL. Use Admin.products() instead.
            "::get::Admin::products": {
              isArray: true,
              url: urlBase + "/Admins/:id/products",
              method: "GET",
            },

            // INTERNAL. Use Admin.products.create() instead.
            "::create::Admin::products": {
              url: urlBase + "/Admins/:id/products",
              method: "POST",
            },

            // INTERNAL. Use Admin.products.createMany() instead.
            "::createMany::Admin::products": {
              isArray: true,
              url: urlBase + "/Admins/:id/products",
              method: "POST",
            },

            // INTERNAL. Use Admin.products.destroyAll() instead.
            "::delete::Admin::products": {
              url: urlBase + "/Admins/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.products.count() instead.
            "::count::Admin::products": {
              url: urlBase + "/Admins/:id/products/count",
              method: "GET",
            },

            // INTERNAL. Use ProductAccess.product() instead.
            "::get::ProductAccess::product": {
              url: urlBase + "/ProductAccesses/:id/product",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Product#patchOrCreate
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Product#updateOrCreate
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Product#update
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Product#destroyById
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Product#removeById
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Product#patchAttributes
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Product#modelName
        * @propertyOf apiServices.Product
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Product`.
        */
        R.modelName = "Product";


            /**
             * @ngdoc method
             * @name apiServices.Product#owner
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Fetches belongsTo relation owner.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.owner = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Product::owner"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Product.accesses
     * @header apiServices.Product.accesses
     * @object
     * @description
     *
     * The object `Product.accesses` groups methods
     * manipulating `ProductAccess` instances related to `Product`.
     *
     * Call {@link apiServices.Product#accesses Product.accesses()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Product#accesses
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Queries accesses of Product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.accesses = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::get::Product::accesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.accesses#count
             * @methodOf apiServices.Product.accesses
             *
             * @description
             *
             * Counts accesses of Product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.accesses.count = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::count::Product::accesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.accesses#create
             * @methodOf apiServices.Product.accesses
             *
             * @description
             *
             * Creates a new instance in accesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.accesses.create = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::create::Product::accesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.accesses#createMany
             * @methodOf apiServices.Product.accesses
             *
             * @description
             *
             * Creates a new instance in accesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.accesses.createMany = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::createMany::Product::accesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.accesses#destroyAll
             * @methodOf apiServices.Product.accesses
             *
             * @description
             *
             * Deletes all accesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accesses.destroyAll = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::delete::Product::accesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.accesses#destroyById
             * @methodOf apiServices.Product.accesses
             *
             * @description
             *
             * Delete a related item by id for accesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for accesses
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accesses.destroyById = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::destroyById::Product::accesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.accesses#findById
             * @methodOf apiServices.Product.accesses
             *
             * @description
             *
             * Find a related item by id for accesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for accesses
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.accesses.findById = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::findById::Product::accesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.accesses#updateById
             * @methodOf apiServices.Product.accesses
             *
             * @description
             *
             * Update a related item by id for accesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for accesses
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R.accesses.updateById = function() {
          var TargetResource = $injector.get("ProductAccess");
          var action = TargetResource["::updateById::Product::accesses"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Product.admins
     * @header apiServices.Product.admins
     * @object
     * @description
     *
     * The object `Product.admins` groups methods
     * manipulating `Admin` instances related to `Product`.
     *
     * Call {@link apiServices.Product#admins Product.admins()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Product#admins
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Queries admins of Product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#count
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Counts admins of Product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.admins.count = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::count::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#create
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Creates a new instance in admins of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.create = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::create::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#createMany
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Creates a new instance in admins of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.createMany = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::createMany::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#destroyAll
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Deletes all admins of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.admins.destroyAll = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::delete::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#destroyById
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Delete a related item by id for admins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for admins
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.admins.destroyById = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::destroyById::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#exists
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Check the existence of admins relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for admins
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.exists = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::exists::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#findById
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Find a related item by id for admins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for admins
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.findById = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::findById::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#link
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Add a related item by id for admins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for admins
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.link = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::link::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#unlink
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Remove the admins relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for admins
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.admins.unlink = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::unlink::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product.admins#updateById
             * @methodOf apiServices.Product.admins
             *
             * @description
             *
             * Update a related item by id for admins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for admins
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admins.updateById = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::updateById::Product::admins"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Product#lastModifiedBy
             * @methodOf apiServices.Product
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Product::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.ProductAccess
 * @header apiServices.ProductAccess
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ProductAccess` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ProductAccess",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ProductAccesses/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ProductAccess.product() instead.
            "prototype$__get__product": {
              url: urlBase + "/ProductAccesses/:id/product",
              method: "GET",
            },

            // INTERNAL. Use ProductAccess.admin() instead.
            "prototype$__get__admin": {
              url: urlBase + "/ProductAccesses/:id/admin",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#prototype$__get__role
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Fetches belongsTo relation role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "prototype$__get__role": {
              url: urlBase + "/ProductAccesses/:id/role",
              method: "GET",
            },

            // INTERNAL. Use ProductAccess.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/ProductAccesses/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#create
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ProductAccesses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#createMany
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ProductAccesses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#upsert
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ProductAccesses",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#replaceOrCreate
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ProductAccesses/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#exists
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ProductAccesses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#findById
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ProductAccesses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#replaceById
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ProductAccesses/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#find
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ProductAccesses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#findOne
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ProductAccesses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#updateAll
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ProductAccesses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#deleteById
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ProductAccesses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#count
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ProductAccesses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#prototype$updateAttributes
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ProductAccesses/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#createChangeStream
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ProductAccesses/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Admin.productAccesses.findById() instead.
            "::findById::Admin::productAccesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/productAccesses/:fk",
              method: "GET",
            },

            // INTERNAL. Use Admin.productAccesses.destroyById() instead.
            "::destroyById::Admin::productAccesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/productAccesses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.productAccesses.updateById() instead.
            "::updateById::Admin::productAccesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/productAccesses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Admin.productAccesses() instead.
            "::get::Admin::productAccesses": {
              isArray: true,
              url: urlBase + "/Admins/:id/productAccesses",
              method: "GET",
            },

            // INTERNAL. Use Admin.productAccesses.create() instead.
            "::create::Admin::productAccesses": {
              url: urlBase + "/Admins/:id/productAccesses",
              method: "POST",
            },

            // INTERNAL. Use Admin.productAccesses.createMany() instead.
            "::createMany::Admin::productAccesses": {
              isArray: true,
              url: urlBase + "/Admins/:id/productAccesses",
              method: "POST",
            },

            // INTERNAL. Use Admin.productAccesses.destroyAll() instead.
            "::delete::Admin::productAccesses": {
              url: urlBase + "/Admins/:id/productAccesses",
              method: "DELETE",
            },

            // INTERNAL. Use Admin.productAccesses.count() instead.
            "::count::Admin::productAccesses": {
              url: urlBase + "/Admins/:id/productAccesses/count",
              method: "GET",
            },

            // INTERNAL. Use Product.accesses.findById() instead.
            "::findById::Product::accesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/accesses/:fk",
              method: "GET",
            },

            // INTERNAL. Use Product.accesses.destroyById() instead.
            "::destroyById::Product::accesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/accesses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.accesses.updateById() instead.
            "::updateById::Product::accesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/accesses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.accesses() instead.
            "::get::Product::accesses": {
              isArray: true,
              url: urlBase + "/Products/:id/accesses",
              method: "GET",
            },

            // INTERNAL. Use Product.accesses.create() instead.
            "::create::Product::accesses": {
              url: urlBase + "/Products/:id/accesses",
              method: "POST",
            },

            // INTERNAL. Use Product.accesses.createMany() instead.
            "::createMany::Product::accesses": {
              isArray: true,
              url: urlBase + "/Products/:id/accesses",
              method: "POST",
            },

            // INTERNAL. Use Product.accesses.destroyAll() instead.
            "::delete::Product::accesses": {
              url: urlBase + "/Products/:id/accesses",
              method: "DELETE",
            },

            // INTERNAL. Use Product.accesses.count() instead.
            "::count::Product::accesses": {
              url: urlBase + "/Products/:id/accesses/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#patchOrCreate
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#updateOrCreate
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#update
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#destroyById
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#removeById
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#patchAttributes
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProductAccess` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.ProductAccess#modelName
        * @propertyOf apiServices.ProductAccess
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ProductAccess`.
        */
        R.modelName = "ProductAccess";


            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#product
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Fetches belongsTo relation product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::ProductAccess::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#admin
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Fetches belongsTo relation admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admin = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::ProductAccess::admin"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ProductAccess#lastModifiedBy
             * @methodOf apiServices.ProductAccess
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::ProductAccess::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Event
 * @header apiServices.Event
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Event` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Event",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Events/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Event.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/Events/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use Event.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Events/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#create
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Events",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#createMany
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Events",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#upsert
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Events",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#replaceOrCreate
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Events/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#exists
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Events/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#findById
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Events/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#replaceById
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Events/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#find
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Events",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#findOne
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Events/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#updateAll
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Events/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#deleteById
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Events/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#count
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Events/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#prototype$updateAttributes
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Events/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Event#createChangeStream
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Events/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Event#patchOrCreate
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Event#updateOrCreate
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Event#update
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Event#destroyById
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Event#removeById
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Event#patchAttributes
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Event#modelName
        * @propertyOf apiServices.Event
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Event`.
        */
        R.modelName = "Event";


            /**
             * @ngdoc method
             * @name apiServices.Event#customer
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::Event::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Event#lastModifiedBy
             * @methodOf apiServices.Event
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Event::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Gameplay
 * @header apiServices.Gameplay
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Gameplay` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Gameplay",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Gameplays/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Gameplay.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Gameplays/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#create
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Gameplays",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#createMany
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Gameplays",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#upsert
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Gameplays",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#replaceOrCreate
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Gameplays/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#exists
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Gameplays/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#findById
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Gameplays/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#replaceById
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Gameplays/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#find
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Gameplays",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#findOne
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Gameplays/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#updateAll
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Gameplays/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#deleteById
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Gameplays/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#count
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Gameplays/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#prototype$updateAttributes
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Gameplays/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#createChangeStream
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Gameplays/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Gameplay#patchOrCreate
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#updateOrCreate
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#update
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#destroyById
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#removeById
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Gameplay#patchAttributes
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Gameplay` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Gameplay#modelName
        * @propertyOf apiServices.Gameplay
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Gameplay`.
        */
        R.modelName = "Gameplay";


            /**
             * @ngdoc method
             * @name apiServices.Gameplay#lastModifiedBy
             * @methodOf apiServices.Gameplay
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Gameplay::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Good
 * @header apiServices.Good
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Good` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Good",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Goods/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Good.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Goods/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#create
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Goods",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#createMany
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Goods",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#upsert
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Goods",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#replaceOrCreate
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Goods/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#exists
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Goods/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#findById
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Goods/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#replaceById
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Goods/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#find
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Goods",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#findOne
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Goods/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#updateAll
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Goods/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#deleteById
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Goods/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#count
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Goods/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#prototype$updateAttributes
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Goods/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Good#createChangeStream
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Goods/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Good#patchOrCreate
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Good#updateOrCreate
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Good#update
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Good#destroyById
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Good#removeById
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Good#patchAttributes
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Good` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Good#modelName
        * @propertyOf apiServices.Good
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Good`.
        */
        R.modelName = "Good";


            /**
             * @ngdoc method
             * @name apiServices.Good#lastModifiedBy
             * @methodOf apiServices.Good
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Good::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Coupon
 * @header apiServices.Coupon
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Coupon` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Coupon",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Coupons/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Coupon.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Coupons/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#create
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Coupons",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#createMany
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Coupons",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#upsert
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Coupons",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#replaceOrCreate
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Coupons/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#exists
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Coupons/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#findById
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Coupons/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#replaceById
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Coupons/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#find
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Coupons",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#findOne
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Coupons/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#updateAll
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Coupons/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#deleteById
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Coupons/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#count
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Coupons/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#prototype$updateAttributes
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Coupons/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Coupon#createChangeStream
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Coupons/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Coupon#patchOrCreate
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Coupon#updateOrCreate
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Coupon#update
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Coupon#destroyById
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Coupon#removeById
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Coupon#patchAttributes
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Coupon#modelName
        * @propertyOf apiServices.Coupon
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Coupon`.
        */
        R.modelName = "Coupon";


            /**
             * @ngdoc method
             * @name apiServices.Coupon#lastModifiedBy
             * @methodOf apiServices.Coupon
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Coupon::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Unlock
 * @header apiServices.Unlock
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Unlock` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Unlock",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Unlocks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Unlock.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Unlocks/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#create
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Unlocks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#createMany
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Unlocks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#upsert
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Unlocks",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#replaceOrCreate
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Unlocks/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#exists
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Unlocks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#findById
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Unlocks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#replaceById
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Unlocks/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#find
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Unlocks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#findOne
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Unlocks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#updateAll
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Unlocks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#deleteById
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Unlocks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#count
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Unlocks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#prototype$updateAttributes
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Unlocks/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Unlock#createChangeStream
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Unlocks/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Unlock#patchOrCreate
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Unlock#updateOrCreate
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Unlock#update
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Unlock#destroyById
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Unlock#removeById
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Unlock#patchAttributes
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Unlock` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Unlock#modelName
        * @propertyOf apiServices.Unlock
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Unlock`.
        */
        R.modelName = "Unlock";


            /**
             * @ngdoc method
             * @name apiServices.Unlock#lastModifiedBy
             * @methodOf apiServices.Unlock
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Unlock::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Level
 * @header apiServices.Level
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Level` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Level",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Levels/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Level.prev() instead.
            "prototype$__get__prev": {
              url: urlBase + "/Levels/:id/prev",
              method: "GET",
            },

            // INTERNAL. Use Level.prev.create() instead.
            "prototype$__create__prev": {
              url: urlBase + "/Levels/:id/prev",
              method: "POST",
            },

            // INTERNAL. Use Level.prev.update() instead.
            "prototype$__update__prev": {
              url: urlBase + "/Levels/:id/prev",
              method: "PUT",
            },

            // INTERNAL. Use Level.prev.destroy() instead.
            "prototype$__destroy__prev": {
              url: urlBase + "/Levels/:id/prev",
              method: "DELETE",
            },

            // INTERNAL. Use Level.next() instead.
            "prototype$__get__next": {
              url: urlBase + "/Levels/:id/next",
              method: "GET",
            },

            // INTERNAL. Use Level.next.create() instead.
            "prototype$__create__next": {
              url: urlBase + "/Levels/:id/next",
              method: "POST",
            },

            // INTERNAL. Use Level.next.update() instead.
            "prototype$__update__next": {
              url: urlBase + "/Levels/:id/next",
              method: "PUT",
            },

            // INTERNAL. Use Level.next.destroy() instead.
            "prototype$__destroy__next": {
              url: urlBase + "/Levels/:id/next",
              method: "DELETE",
            },

            // INTERNAL. Use Level.scoreUnit() instead.
            "prototype$__get__scoreUnit": {
              url: urlBase + "/Levels/:id/scoreUnit",
              method: "GET",
            },

            // INTERNAL. Use Level.instances.findById() instead.
            "prototype$__findById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Levels/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Level.instances.destroyById() instead.
            "prototype$__destroyById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Levels/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Level.instances.updateById() instead.
            "prototype$__updateById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Levels/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Level.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Levels/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Level.instances() instead.
            "prototype$__get__instances": {
              isArray: true,
              url: urlBase + "/Levels/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use Level.instances.create() instead.
            "prototype$__create__instances": {
              url: urlBase + "/Levels/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Level.instances.destroyAll() instead.
            "prototype$__delete__instances": {
              url: urlBase + "/Levels/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use Level.instances.count() instead.
            "prototype$__count__instances": {
              url: urlBase + "/Levels/:id/instances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#create
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Levels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#createMany
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Levels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#upsert
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Levels",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#replaceOrCreate
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Levels/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#exists
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Levels/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#findById
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Levels/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#replaceById
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Levels/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#find
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Levels",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#findOne
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Levels/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#updateAll
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Levels/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#deleteById
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Levels/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#count
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Levels/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#prototype$updateAttributes
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Levels/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Level#createChangeStream
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Levels/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Customer.levels.findById() instead.
            "::findById::Customer::levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.levels.destroyById() instead.
            "::destroyById::Customer::levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.levels.updateById() instead.
            "::updateById::Customer::levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.levels.link() instead.
            "::link::Customer::levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.levels.unlink() instead.
            "::unlink::Customer::levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.levels.exists() instead.
            "::exists::Customer::levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/levels/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Customer.levels() instead.
            "::get::Customer::levels": {
              isArray: true,
              url: urlBase + "/Customers/:id/levels",
              method: "GET",
            },

            // INTERNAL. Use Customer.levels.create() instead.
            "::create::Customer::levels": {
              url: urlBase + "/Customers/:id/levels",
              method: "POST",
            },

            // INTERNAL. Use Customer.levels.createMany() instead.
            "::createMany::Customer::levels": {
              isArray: true,
              url: urlBase + "/Customers/:id/levels",
              method: "POST",
            },

            // INTERNAL. Use Customer.levels.destroyAll() instead.
            "::delete::Customer::levels": {
              url: urlBase + "/Customers/:id/levels",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.levels.count() instead.
            "::count::Customer::levels": {
              url: urlBase + "/Customers/:id/levels/count",
              method: "GET",
            },

            // INTERNAL. Use Level.prev() instead.
            "::get::Level::prev": {
              url: urlBase + "/Levels/:id/prev",
              method: "GET",
            },

            // INTERNAL. Use Level.prev.create() instead.
            "::create::Level::prev": {
              url: urlBase + "/Levels/:id/prev",
              method: "POST",
            },

            // INTERNAL. Use Level.prev.createMany() instead.
            "::createMany::Level::prev": {
              isArray: true,
              url: urlBase + "/Levels/:id/prev",
              method: "POST",
            },

            // INTERNAL. Use Level.prev.update() instead.
            "::update::Level::prev": {
              url: urlBase + "/Levels/:id/prev",
              method: "PUT",
            },

            // INTERNAL. Use Level.prev.destroy() instead.
            "::destroy::Level::prev": {
              url: urlBase + "/Levels/:id/prev",
              method: "DELETE",
            },

            // INTERNAL. Use Level.next() instead.
            "::get::Level::next": {
              url: urlBase + "/Levels/:id/next",
              method: "GET",
            },

            // INTERNAL. Use Level.next.create() instead.
            "::create::Level::next": {
              url: urlBase + "/Levels/:id/next",
              method: "POST",
            },

            // INTERNAL. Use Level.next.createMany() instead.
            "::createMany::Level::next": {
              isArray: true,
              url: urlBase + "/Levels/:id/next",
              method: "POST",
            },

            // INTERNAL. Use Level.next.update() instead.
            "::update::Level::next": {
              url: urlBase + "/Levels/:id/next",
              method: "PUT",
            },

            // INTERNAL. Use Level.next.destroy() instead.
            "::destroy::Level::next": {
              url: urlBase + "/Levels/:id/next",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.levels.findById() instead.
            "::findById::ScoreUnit::levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/levels/:fk",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.levels.destroyById() instead.
            "::destroyById::ScoreUnit::levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/levels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.levels.updateById() instead.
            "::updateById::ScoreUnit::levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/levels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ScoreUnit.levels() instead.
            "::get::ScoreUnit::levels": {
              isArray: true,
              url: urlBase + "/ScoreUnits/:id/levels",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.levels.create() instead.
            "::create::ScoreUnit::levels": {
              url: urlBase + "/ScoreUnits/:id/levels",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.levels.createMany() instead.
            "::createMany::ScoreUnit::levels": {
              isArray: true,
              url: urlBase + "/ScoreUnits/:id/levels",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.levels.destroyAll() instead.
            "::delete::ScoreUnit::levels": {
              url: urlBase + "/ScoreUnits/:id/levels",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.levels.count() instead.
            "::count::ScoreUnit::levels": {
              url: urlBase + "/ScoreUnits/:id/levels/count",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitInstance.level() instead.
            "::get::ScoreUnitInstance::level": {
              url: urlBase + "/ScoreUnitInstances/:id/level",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Level#patchOrCreate
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Level#updateOrCreate
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Level#update
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Level#destroyById
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Level#removeById
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Level#patchAttributes
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Level#modelName
        * @propertyOf apiServices.Level
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Level`.
        */
        R.modelName = "Level";

    /**
     * @ngdoc object
     * @name apiServices.Level.prev
     * @header apiServices.Level.prev
     * @object
     * @description
     *
     * The object `Level.prev` groups methods
     * manipulating `Level` instances related to `Level`.
     *
     * Call {@link apiServices.Level#prev Level.prev()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Level#prev
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Fetches hasOne relation prev.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.prev = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::get::Level::prev"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.prev#create
             * @methodOf apiServices.Level.prev
             *
             * @description
             *
             * Creates a new instance in prev of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.prev.create = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::create::Level::prev"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.prev#createMany
             * @methodOf apiServices.Level.prev
             *
             * @description
             *
             * Creates a new instance in prev of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.prev.createMany = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::createMany::Level::prev"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.prev#destroy
             * @methodOf apiServices.Level.prev
             *
             * @description
             *
             * Deletes prev of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.prev.destroy = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::destroy::Level::prev"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.prev#update
             * @methodOf apiServices.Level.prev
             *
             * @description
             *
             * Update prev of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.prev.update = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::update::Level::prev"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Level.next
     * @header apiServices.Level.next
     * @object
     * @description
     *
     * The object `Level.next` groups methods
     * manipulating `Level` instances related to `Level`.
     *
     * Call {@link apiServices.Level#next Level.next()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Level#next
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Fetches hasOne relation next.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.next = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::get::Level::next"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.next#create
             * @methodOf apiServices.Level.next
             *
             * @description
             *
             * Creates a new instance in next of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.next.create = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::create::Level::next"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.next#createMany
             * @methodOf apiServices.Level.next
             *
             * @description
             *
             * Creates a new instance in next of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.next.createMany = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::createMany::Level::next"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.next#destroy
             * @methodOf apiServices.Level.next
             *
             * @description
             *
             * Deletes next of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.next.destroy = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::destroy::Level::next"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.next#update
             * @methodOf apiServices.Level.next
             *
             * @description
             *
             * Update next of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.next.update = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::update::Level::next"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level#scoreUnit
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Fetches belongsTo relation scoreUnit.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
        R.scoreUnit = function() {
          var TargetResource = $injector.get("ScoreUnit");
          var action = TargetResource["::get::Level::scoreUnit"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Level.instances
     * @header apiServices.Level.instances
     * @object
     * @description
     *
     * The object `Level.instances` groups methods
     * manipulating `ScoreUnitInstance` instances related to `Level`.
     *
     * Call {@link apiServices.Level#instances Level.instances()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Level#instances
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Queries instances of Level.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::get::Level::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.instances#count
             * @methodOf apiServices.Level.instances
             *
             * @description
             *
             * Counts instances of Level.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.instances.count = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::count::Level::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.instances#create
             * @methodOf apiServices.Level.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances.create = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::create::Level::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.instances#createMany
             * @methodOf apiServices.Level.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances.createMany = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::createMany::Level::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.instances#destroyAll
             * @methodOf apiServices.Level.instances
             *
             * @description
             *
             * Deletes all instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyAll = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::delete::Level::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.instances#destroyById
             * @methodOf apiServices.Level.instances
             *
             * @description
             *
             * Delete a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyById = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::destroyById::Level::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.instances#findById
             * @methodOf apiServices.Level.instances
             *
             * @description
             *
             * Find a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances.findById = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::findById::Level::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level.instances#updateById
             * @methodOf apiServices.Level.instances
             *
             * @description
             *
             * Update a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances.updateById = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::updateById::Level::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Level#lastModifiedBy
             * @methodOf apiServices.Level
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Level::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Listener
 * @header apiServices.Listener
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Listener` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Listener",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Listeners/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Listener.rule() instead.
            "prototype$__get__rule": {
              url: urlBase + "/Listeners/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use Listener.ruleInstances.findById() instead.
            "prototype$__findById__ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Listener.ruleInstances.destroyById() instead.
            "prototype$__destroyById__ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Listener.ruleInstances.updateById() instead.
            "prototype$__updateById__ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Listener.ruleInstances.link() instead.
            "prototype$__link__ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Listener.ruleInstances.unlink() instead.
            "prototype$__unlink__ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Listener.ruleInstances.exists() instead.
            "prototype$__exists__ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Listener.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Listeners/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Listener.ruleInstances() instead.
            "prototype$__get__ruleInstances": {
              isArray: true,
              url: urlBase + "/Listeners/:id/ruleInstances",
              method: "GET",
            },

            // INTERNAL. Use Listener.ruleInstances.create() instead.
            "prototype$__create__ruleInstances": {
              url: urlBase + "/Listeners/:id/ruleInstances",
              method: "POST",
            },

            // INTERNAL. Use Listener.ruleInstances.destroyAll() instead.
            "prototype$__delete__ruleInstances": {
              url: urlBase + "/Listeners/:id/ruleInstances",
              method: "DELETE",
            },

            // INTERNAL. Use Listener.ruleInstances.count() instead.
            "prototype$__count__ruleInstances": {
              url: urlBase + "/Listeners/:id/ruleInstances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#create
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Listeners",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#createMany
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Listeners",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#upsert
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Listeners",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#replaceOrCreate
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Listeners/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#exists
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Listeners/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#findById
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Listeners/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#replaceById
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Listeners/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#find
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Listeners",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#findOne
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Listeners/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#updateAll
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Listeners/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#deleteById
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Listeners/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#count
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Listeners/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#prototype$updateAttributes
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Listeners/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Listener#createChangeStream
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Listeners/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Rule._listeners.findById() instead.
            "::findById::Rule::_listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_listeners/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rule._listeners.destroyById() instead.
            "::destroyById::Rule::_listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_listeners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rule._listeners.updateById() instead.
            "::updateById::Rule::_listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_listeners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rule._listeners() instead.
            "::get::Rule::_listeners": {
              isArray: true,
              url: urlBase + "/Rules/:id/_listeners",
              method: "GET",
            },

            // INTERNAL. Use Rule._listeners.create() instead.
            "::create::Rule::_listeners": {
              url: urlBase + "/Rules/:id/_listeners",
              method: "POST",
            },

            // INTERNAL. Use Rule._listeners.createMany() instead.
            "::createMany::Rule::_listeners": {
              isArray: true,
              url: urlBase + "/Rules/:id/_listeners",
              method: "POST",
            },

            // INTERNAL. Use Rule._listeners.destroyAll() instead.
            "::delete::Rule::_listeners": {
              url: urlBase + "/Rules/:id/_listeners",
              method: "DELETE",
            },

            // INTERNAL. Use Rule._listeners.count() instead.
            "::count::Rule::_listeners": {
              url: urlBase + "/Rules/:id/_listeners/count",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.listeners.findById() instead.
            "::findById::RuleInstance::listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/:fk",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.listeners.destroyById() instead.
            "::destroyById::RuleInstance::listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RuleInstance.listeners.updateById() instead.
            "::updateById::RuleInstance::listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RuleInstance.listeners.link() instead.
            "::link::RuleInstance::listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RuleInstance.listeners.unlink() instead.
            "::unlink::RuleInstance::listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RuleInstance.listeners.exists() instead.
            "::exists::RuleInstance::listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use RuleInstance.listeners() instead.
            "::get::RuleInstance::listeners": {
              isArray: true,
              url: urlBase + "/RuleInstances/:id/listeners",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.listeners.create() instead.
            "::create::RuleInstance::listeners": {
              url: urlBase + "/RuleInstances/:id/listeners",
              method: "POST",
            },

            // INTERNAL. Use RuleInstance.listeners.createMany() instead.
            "::createMany::RuleInstance::listeners": {
              isArray: true,
              url: urlBase + "/RuleInstances/:id/listeners",
              method: "POST",
            },

            // INTERNAL. Use RuleInstance.listeners.destroyAll() instead.
            "::delete::RuleInstance::listeners": {
              url: urlBase + "/RuleInstances/:id/listeners",
              method: "DELETE",
            },

            // INTERNAL. Use RuleInstance.listeners.count() instead.
            "::count::RuleInstance::listeners": {
              url: urlBase + "/RuleInstances/:id/listeners/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Listener#patchOrCreate
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Listener#updateOrCreate
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Listener#update
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Listener#destroyById
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Listener#removeById
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Listener#patchAttributes
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Listener#modelName
        * @propertyOf apiServices.Listener
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Listener`.
        */
        R.modelName = "Listener";


            /**
             * @ngdoc method
             * @name apiServices.Listener#rule
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Fetches belongsTo relation rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::get::Listener::rule"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Listener.ruleInstances
     * @header apiServices.Listener.ruleInstances
     * @object
     * @description
     *
     * The object `Listener.ruleInstances` groups methods
     * manipulating `RuleInstance` instances related to `Listener`.
     *
     * Call {@link apiServices.Listener#ruleInstances Listener.ruleInstances()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Listener#ruleInstances
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Queries ruleInstances of Listener.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.ruleInstances = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::get::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#count
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Counts ruleInstances of Listener.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.ruleInstances.count = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::count::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#create
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Creates a new instance in ruleInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.ruleInstances.create = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::create::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#createMany
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Creates a new instance in ruleInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.ruleInstances.createMany = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::createMany::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#destroyAll
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Deletes all ruleInstances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.ruleInstances.destroyAll = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::delete::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#destroyById
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Delete a related item by id for ruleInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for ruleInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.ruleInstances.destroyById = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::destroyById::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#exists
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Check the existence of ruleInstances relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for ruleInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.ruleInstances.exists = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::exists::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#findById
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Find a related item by id for ruleInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for ruleInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.ruleInstances.findById = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::findById::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#link
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Add a related item by id for ruleInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for ruleInstances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.ruleInstances.link = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::link::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#unlink
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Remove the ruleInstances relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for ruleInstances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.ruleInstances.unlink = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::unlink::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener.ruleInstances#updateById
             * @methodOf apiServices.Listener.ruleInstances
             *
             * @description
             *
             * Update a related item by id for ruleInstances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for ruleInstances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.ruleInstances.updateById = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::updateById::Listener::ruleInstances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Listener#lastModifiedBy
             * @methodOf apiServices.Listener
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Listener::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Rule
 * @header apiServices.Rule
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Rule` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Rule",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Rules/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name apiServices.Rule#prototype$__get__parent
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Fetches belongsTo relation parent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "prototype$__get__parent": {
              url: urlBase + "/Rules/:id/parent",
              method: "GET",
            },

            // INTERNAL. Use Rule._listeners.findById() instead.
            "prototype$__findById___listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_listeners/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rule._listeners.destroyById() instead.
            "prototype$__destroyById___listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_listeners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rule._listeners.updateById() instead.
            "prototype$__updateById___listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_listeners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rule._triggers.findById() instead.
            "prototype$__findById___triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_triggers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rule._triggers.destroyById() instead.
            "prototype$__destroyById___triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_triggers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rule._triggers.updateById() instead.
            "prototype$__updateById___triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_triggers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rule.instances.findById() instead.
            "prototype$__findById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rule.instances.destroyById() instead.
            "prototype$__destroyById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rule.instances.updateById() instead.
            "prototype$__updateById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rule.historic.findById() instead.
            "prototype$__findById__historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/historic/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rule.historic.destroyById() instead.
            "prototype$__destroyById__historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/historic/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rule.historic.updateById() instead.
            "prototype$__updateById__historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/historic/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rule.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Rules/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Rule._listeners() instead.
            "prototype$__get___listeners": {
              isArray: true,
              url: urlBase + "/Rules/:id/_listeners",
              method: "GET",
            },

            // INTERNAL. Use Rule._listeners.create() instead.
            "prototype$__create___listeners": {
              url: urlBase + "/Rules/:id/_listeners",
              method: "POST",
            },

            // INTERNAL. Use Rule._listeners.destroyAll() instead.
            "prototype$__delete___listeners": {
              url: urlBase + "/Rules/:id/_listeners",
              method: "DELETE",
            },

            // INTERNAL. Use Rule._listeners.count() instead.
            "prototype$__count___listeners": {
              url: urlBase + "/Rules/:id/_listeners/count",
              method: "GET",
            },

            // INTERNAL. Use Rule._triggers() instead.
            "prototype$__get___triggers": {
              isArray: true,
              url: urlBase + "/Rules/:id/_triggers",
              method: "GET",
            },

            // INTERNAL. Use Rule._triggers.create() instead.
            "prototype$__create___triggers": {
              url: urlBase + "/Rules/:id/_triggers",
              method: "POST",
            },

            // INTERNAL. Use Rule._triggers.destroyAll() instead.
            "prototype$__delete___triggers": {
              url: urlBase + "/Rules/:id/_triggers",
              method: "DELETE",
            },

            // INTERNAL. Use Rule._triggers.count() instead.
            "prototype$__count___triggers": {
              url: urlBase + "/Rules/:id/_triggers/count",
              method: "GET",
            },

            // INTERNAL. Use Rule.instances() instead.
            "prototype$__get__instances": {
              isArray: true,
              url: urlBase + "/Rules/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use Rule.instances.create() instead.
            "prototype$__create__instances": {
              url: urlBase + "/Rules/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Rule.instances.destroyAll() instead.
            "prototype$__delete__instances": {
              url: urlBase + "/Rules/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use Rule.instances.count() instead.
            "prototype$__count__instances": {
              url: urlBase + "/Rules/:id/instances/count",
              method: "GET",
            },

            // INTERNAL. Use Rule.historic() instead.
            "prototype$__get__historic": {
              isArray: true,
              url: urlBase + "/Rules/:id/historic",
              method: "GET",
            },

            // INTERNAL. Use Rule.historic.create() instead.
            "prototype$__create__historic": {
              url: urlBase + "/Rules/:id/historic",
              method: "POST",
            },

            // INTERNAL. Use Rule.historic.destroyAll() instead.
            "prototype$__delete__historic": {
              url: urlBase + "/Rules/:id/historic",
              method: "DELETE",
            },

            // INTERNAL. Use Rule.historic.count() instead.
            "prototype$__count__historic": {
              url: urlBase + "/Rules/:id/historic/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#create
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Rules",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#createMany
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Rules",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#upsert
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Rules",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#replaceOrCreate
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Rules/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#exists
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Rules/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#findById
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Rules/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#replaceById
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Rules/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#find
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Rules",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#findOne
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Rules/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#updateAll
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Rules/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#deleteById
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Rules/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#count
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Rules/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#prototype$updateAttributes
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Rules/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Rule#createChangeStream
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Rules/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Badge.rule() instead.
            "::get::Badge::rule": {
              url: urlBase + "/Badges/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use Badge.rule.create() instead.
            "::create::Badge::rule": {
              url: urlBase + "/Badges/:id/rule",
              method: "POST",
            },

            // INTERNAL. Use Badge.rule.createMany() instead.
            "::createMany::Badge::rule": {
              isArray: true,
              url: urlBase + "/Badges/:id/rule",
              method: "POST",
            },

            // INTERNAL. Use Badge.rule.update() instead.
            "::update::Badge::rule": {
              url: urlBase + "/Badges/:id/rule",
              method: "PUT",
            },

            // INTERNAL. Use Badge.rule.destroy() instead.
            "::destroy::Badge::rule": {
              url: urlBase + "/Badges/:id/rule",
              method: "DELETE",
            },

            // INTERNAL. Use Listener.rule() instead.
            "::get::Listener::rule": {
              url: urlBase + "/Listeners/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use Trigger.rule() instead.
            "::get::Trigger::rule": {
              url: urlBase + "/Triggers/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.Rule() instead.
            "::get::RuleInstance::Rule": {
              url: urlBase + "/RuleInstances/:id/Rule",
              method: "GET",
            },

            // INTERNAL. Use RuleHistory.rule() instead.
            "::get::RuleHistory::rule": {
              url: urlBase + "/RuleHistories/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use Step.rule() instead.
            "::get::Step::rule": {
              url: urlBase + "/Steps/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use Step.rule.create() instead.
            "::create::Step::rule": {
              url: urlBase + "/Steps/:id/rule",
              method: "POST",
            },

            // INTERNAL. Use Step.rule.createMany() instead.
            "::createMany::Step::rule": {
              isArray: true,
              url: urlBase + "/Steps/:id/rule",
              method: "POST",
            },

            // INTERNAL. Use Step.rule.update() instead.
            "::update::Step::rule": {
              url: urlBase + "/Steps/:id/rule",
              method: "PUT",
            },

            // INTERNAL. Use Step.rule.destroy() instead.
            "::destroy::Step::rule": {
              url: urlBase + "/Steps/:id/rule",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Rule#patchOrCreate
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Rule#updateOrCreate
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Rule#update
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Rule#destroyById
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Rule#removeById
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Rule#patchAttributes
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Rule#modelName
        * @propertyOf apiServices.Rule
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Rule`.
        */
        R.modelName = "Rule";

    /**
     * @ngdoc object
     * @name apiServices.Rule._listeners
     * @header apiServices.Rule._listeners
     * @object
     * @description
     *
     * The object `Rule._listeners` groups methods
     * manipulating `Listener` instances related to `Rule`.
     *
     * Call {@link apiServices.Rule#_listeners Rule._listeners()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Rule#_listeners
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Queries _listeners of Rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R._listeners = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::get::Rule::_listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._listeners#count
             * @methodOf apiServices.Rule._listeners
             *
             * @description
             *
             * Counts _listeners of Rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R._listeners.count = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::count::Rule::_listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._listeners#create
             * @methodOf apiServices.Rule._listeners
             *
             * @description
             *
             * Creates a new instance in _listeners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R._listeners.create = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::create::Rule::_listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._listeners#createMany
             * @methodOf apiServices.Rule._listeners
             *
             * @description
             *
             * Creates a new instance in _listeners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R._listeners.createMany = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::createMany::Rule::_listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._listeners#destroyAll
             * @methodOf apiServices.Rule._listeners
             *
             * @description
             *
             * Deletes all _listeners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R._listeners.destroyAll = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::delete::Rule::_listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._listeners#destroyById
             * @methodOf apiServices.Rule._listeners
             *
             * @description
             *
             * Delete a related item by id for _listeners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _listeners
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R._listeners.destroyById = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::destroyById::Rule::_listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._listeners#findById
             * @methodOf apiServices.Rule._listeners
             *
             * @description
             *
             * Find a related item by id for _listeners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _listeners
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R._listeners.findById = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::findById::Rule::_listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._listeners#updateById
             * @methodOf apiServices.Rule._listeners
             *
             * @description
             *
             * Update a related item by id for _listeners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _listeners
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R._listeners.updateById = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::updateById::Rule::_listeners"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Rule._triggers
     * @header apiServices.Rule._triggers
     * @object
     * @description
     *
     * The object `Rule._triggers` groups methods
     * manipulating `Trigger` instances related to `Rule`.
     *
     * Call {@link apiServices.Rule#_triggers Rule._triggers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Rule#_triggers
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Queries _triggers of Rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::get::Rule::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._triggers#count
             * @methodOf apiServices.Rule._triggers
             *
             * @description
             *
             * Counts _triggers of Rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R._triggers.count = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::count::Rule::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._triggers#create
             * @methodOf apiServices.Rule._triggers
             *
             * @description
             *
             * Creates a new instance in _triggers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers.create = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::create::Rule::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._triggers#createMany
             * @methodOf apiServices.Rule._triggers
             *
             * @description
             *
             * Creates a new instance in _triggers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers.createMany = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::createMany::Rule::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._triggers#destroyAll
             * @methodOf apiServices.Rule._triggers
             *
             * @description
             *
             * Deletes all _triggers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R._triggers.destroyAll = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::delete::Rule::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._triggers#destroyById
             * @methodOf apiServices.Rule._triggers
             *
             * @description
             *
             * Delete a related item by id for _triggers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _triggers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R._triggers.destroyById = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::destroyById::Rule::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._triggers#findById
             * @methodOf apiServices.Rule._triggers
             *
             * @description
             *
             * Find a related item by id for _triggers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _triggers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers.findById = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::findById::Rule::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule._triggers#updateById
             * @methodOf apiServices.Rule._triggers
             *
             * @description
             *
             * Update a related item by id for _triggers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _triggers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers.updateById = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::updateById::Rule::_triggers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Rule.instances
     * @header apiServices.Rule.instances
     * @object
     * @description
     *
     * The object `Rule.instances` groups methods
     * manipulating `RuleInstance` instances related to `Rule`.
     *
     * Call {@link apiServices.Rule#instances Rule.instances()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Rule#instances
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Queries instances of Rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.instances = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::get::Rule::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.instances#count
             * @methodOf apiServices.Rule.instances
             *
             * @description
             *
             * Counts instances of Rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.instances.count = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::count::Rule::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.instances#create
             * @methodOf apiServices.Rule.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.instances.create = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::create::Rule::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.instances#createMany
             * @methodOf apiServices.Rule.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.instances.createMany = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::createMany::Rule::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.instances#destroyAll
             * @methodOf apiServices.Rule.instances
             *
             * @description
             *
             * Deletes all instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyAll = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::delete::Rule::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.instances#destroyById
             * @methodOf apiServices.Rule.instances
             *
             * @description
             *
             * Delete a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyById = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::destroyById::Rule::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.instances#findById
             * @methodOf apiServices.Rule.instances
             *
             * @description
             *
             * Find a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.instances.findById = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::findById::Rule::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.instances#updateById
             * @methodOf apiServices.Rule.instances
             *
             * @description
             *
             * Update a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R.instances.updateById = function() {
          var TargetResource = $injector.get("RuleInstance");
          var action = TargetResource["::updateById::Rule::instances"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Rule.historic
     * @header apiServices.Rule.historic
     * @object
     * @description
     *
     * The object `Rule.historic` groups methods
     * manipulating `RuleHistory` instances related to `Rule`.
     *
     * Call {@link apiServices.Rule#historic Rule.historic()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Rule#historic
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Queries historic of Rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R.historic = function() {
          var TargetResource = $injector.get("RuleHistory");
          var action = TargetResource["::get::Rule::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.historic#count
             * @methodOf apiServices.Rule.historic
             *
             * @description
             *
             * Counts historic of Rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.historic.count = function() {
          var TargetResource = $injector.get("RuleHistory");
          var action = TargetResource["::count::Rule::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.historic#create
             * @methodOf apiServices.Rule.historic
             *
             * @description
             *
             * Creates a new instance in historic of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R.historic.create = function() {
          var TargetResource = $injector.get("RuleHistory");
          var action = TargetResource["::create::Rule::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.historic#createMany
             * @methodOf apiServices.Rule.historic
             *
             * @description
             *
             * Creates a new instance in historic of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R.historic.createMany = function() {
          var TargetResource = $injector.get("RuleHistory");
          var action = TargetResource["::createMany::Rule::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.historic#destroyAll
             * @methodOf apiServices.Rule.historic
             *
             * @description
             *
             * Deletes all historic of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.historic.destroyAll = function() {
          var TargetResource = $injector.get("RuleHistory");
          var action = TargetResource["::delete::Rule::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.historic#destroyById
             * @methodOf apiServices.Rule.historic
             *
             * @description
             *
             * Delete a related item by id for historic.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for historic
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.historic.destroyById = function() {
          var TargetResource = $injector.get("RuleHistory");
          var action = TargetResource["::destroyById::Rule::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.historic#findById
             * @methodOf apiServices.Rule.historic
             *
             * @description
             *
             * Find a related item by id for historic.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for historic
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R.historic.findById = function() {
          var TargetResource = $injector.get("RuleHistory");
          var action = TargetResource["::findById::Rule::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule.historic#updateById
             * @methodOf apiServices.Rule.historic
             *
             * @description
             *
             * Update a related item by id for historic.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for historic
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R.historic.updateById = function() {
          var TargetResource = $injector.get("RuleHistory");
          var action = TargetResource["::updateById::Rule::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Rule#lastModifiedBy
             * @methodOf apiServices.Rule
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Rule::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Trigger
 * @header apiServices.Trigger
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Trigger` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Trigger",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Triggers/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Trigger.rule() instead.
            "prototype$__get__rule": {
              url: urlBase + "/Triggers/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use Trigger.quest() instead.
            "prototype$__get__quest": {
              url: urlBase + "/Triggers/:id/quest",
              method: "GET",
            },

            // INTERNAL. Use Trigger.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Triggers/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#create
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Triggers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#createMany
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Triggers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#upsert
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Triggers",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#replaceOrCreate
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Triggers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#exists
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Triggers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#findById
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Triggers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#replaceById
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Triggers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#find
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Triggers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#findOne
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Triggers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#updateAll
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Triggers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#deleteById
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Triggers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#count
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Triggers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#prototype$updateAttributes
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Triggers/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Trigger#createChangeStream
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Triggers/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Rule._triggers.findById() instead.
            "::findById::Rule::_triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_triggers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rule._triggers.destroyById() instead.
            "::destroyById::Rule::_triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_triggers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rule._triggers.updateById() instead.
            "::updateById::Rule::_triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/_triggers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rule._triggers() instead.
            "::get::Rule::_triggers": {
              isArray: true,
              url: urlBase + "/Rules/:id/_triggers",
              method: "GET",
            },

            // INTERNAL. Use Rule._triggers.create() instead.
            "::create::Rule::_triggers": {
              url: urlBase + "/Rules/:id/_triggers",
              method: "POST",
            },

            // INTERNAL. Use Rule._triggers.createMany() instead.
            "::createMany::Rule::_triggers": {
              isArray: true,
              url: urlBase + "/Rules/:id/_triggers",
              method: "POST",
            },

            // INTERNAL. Use Rule._triggers.destroyAll() instead.
            "::delete::Rule::_triggers": {
              url: urlBase + "/Rules/:id/_triggers",
              method: "DELETE",
            },

            // INTERNAL. Use Rule._triggers.count() instead.
            "::count::Rule::_triggers": {
              url: urlBase + "/Rules/:id/_triggers/count",
              method: "GET",
            },

            // INTERNAL. Use Quest._triggers.findById() instead.
            "::findById::Quest::_triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_triggers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Quest._triggers.destroyById() instead.
            "::destroyById::Quest::_triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_triggers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Quest._triggers.updateById() instead.
            "::updateById::Quest::_triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_triggers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Quest._triggers() instead.
            "::get::Quest::_triggers": {
              isArray: true,
              url: urlBase + "/Quests/:id/_triggers",
              method: "GET",
            },

            // INTERNAL. Use Quest._triggers.create() instead.
            "::create::Quest::_triggers": {
              url: urlBase + "/Quests/:id/_triggers",
              method: "POST",
            },

            // INTERNAL. Use Quest._triggers.createMany() instead.
            "::createMany::Quest::_triggers": {
              isArray: true,
              url: urlBase + "/Quests/:id/_triggers",
              method: "POST",
            },

            // INTERNAL. Use Quest._triggers.destroyAll() instead.
            "::delete::Quest::_triggers": {
              url: urlBase + "/Quests/:id/_triggers",
              method: "DELETE",
            },

            // INTERNAL. Use Quest._triggers.count() instead.
            "::count::Quest::_triggers": {
              url: urlBase + "/Quests/:id/_triggers/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Trigger#patchOrCreate
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Trigger#updateOrCreate
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Trigger#update
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Trigger#destroyById
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Trigger#removeById
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Trigger#patchAttributes
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Trigger#modelName
        * @propertyOf apiServices.Trigger
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Trigger`.
        */
        R.modelName = "Trigger";


            /**
             * @ngdoc method
             * @name apiServices.Trigger#rule
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Fetches belongsTo relation rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::get::Trigger::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Trigger#quest
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Fetches belongsTo relation quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quest = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::get::Trigger::quest"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Trigger#lastModifiedBy
             * @methodOf apiServices.Trigger
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Trigger::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.RuleInstance
 * @header apiServices.RuleInstance
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RuleInstance` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RuleInstance",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/RuleInstances/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RuleInstance.listeners.findById() instead.
            "prototype$__findById__listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/:fk",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.listeners.destroyById() instead.
            "prototype$__destroyById__listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RuleInstance.listeners.updateById() instead.
            "prototype$__updateById__listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RuleInstance.listeners.link() instead.
            "prototype$__link__listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RuleInstance.listeners.unlink() instead.
            "prototype$__unlink__listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RuleInstance.listeners.exists() instead.
            "prototype$__exists__listeners": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RuleInstances/:id/listeners/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use RuleInstance.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/RuleInstances/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.Rule() instead.
            "prototype$__get__Rule": {
              url: urlBase + "/RuleInstances/:id/Rule",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/RuleInstances/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.listeners() instead.
            "prototype$__get__listeners": {
              isArray: true,
              url: urlBase + "/RuleInstances/:id/listeners",
              method: "GET",
            },

            // INTERNAL. Use RuleInstance.listeners.create() instead.
            "prototype$__create__listeners": {
              url: urlBase + "/RuleInstances/:id/listeners",
              method: "POST",
            },

            // INTERNAL. Use RuleInstance.listeners.destroyAll() instead.
            "prototype$__delete__listeners": {
              url: urlBase + "/RuleInstances/:id/listeners",
              method: "DELETE",
            },

            // INTERNAL. Use RuleInstance.listeners.count() instead.
            "prototype$__count__listeners": {
              url: urlBase + "/RuleInstances/:id/listeners/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#create
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RuleInstances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#createMany
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RuleInstances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#upsert
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RuleInstances",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#replaceOrCreate
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/RuleInstances/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#exists
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RuleInstances/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#findById
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RuleInstances/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#replaceById
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/RuleInstances/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#find
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RuleInstances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#findOne
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RuleInstances/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#updateAll
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RuleInstances/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#deleteById
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RuleInstances/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#count
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RuleInstances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#prototype$updateAttributes
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RuleInstances/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#createChangeStream
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RuleInstances/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Listener.ruleInstances.findById() instead.
            "::findById::Listener::ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Listener.ruleInstances.destroyById() instead.
            "::destroyById::Listener::ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Listener.ruleInstances.updateById() instead.
            "::updateById::Listener::ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Listener.ruleInstances.link() instead.
            "::link::Listener::ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Listener.ruleInstances.unlink() instead.
            "::unlink::Listener::ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Listener.ruleInstances.exists() instead.
            "::exists::Listener::ruleInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Listeners/:id/ruleInstances/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Listener.ruleInstances() instead.
            "::get::Listener::ruleInstances": {
              isArray: true,
              url: urlBase + "/Listeners/:id/ruleInstances",
              method: "GET",
            },

            // INTERNAL. Use Listener.ruleInstances.create() instead.
            "::create::Listener::ruleInstances": {
              url: urlBase + "/Listeners/:id/ruleInstances",
              method: "POST",
            },

            // INTERNAL. Use Listener.ruleInstances.createMany() instead.
            "::createMany::Listener::ruleInstances": {
              isArray: true,
              url: urlBase + "/Listeners/:id/ruleInstances",
              method: "POST",
            },

            // INTERNAL. Use Listener.ruleInstances.destroyAll() instead.
            "::delete::Listener::ruleInstances": {
              url: urlBase + "/Listeners/:id/ruleInstances",
              method: "DELETE",
            },

            // INTERNAL. Use Listener.ruleInstances.count() instead.
            "::count::Listener::ruleInstances": {
              url: urlBase + "/Listeners/:id/ruleInstances/count",
              method: "GET",
            },

            // INTERNAL. Use Rule.instances.findById() instead.
            "::findById::Rule::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rule.instances.destroyById() instead.
            "::destroyById::Rule::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rule.instances.updateById() instead.
            "::updateById::Rule::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rule.instances() instead.
            "::get::Rule::instances": {
              isArray: true,
              url: urlBase + "/Rules/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use Rule.instances.create() instead.
            "::create::Rule::instances": {
              url: urlBase + "/Rules/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Rule.instances.createMany() instead.
            "::createMany::Rule::instances": {
              isArray: true,
              url: urlBase + "/Rules/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Rule.instances.destroyAll() instead.
            "::delete::Rule::instances": {
              url: urlBase + "/Rules/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use Rule.instances.count() instead.
            "::count::Rule::instances": {
              url: urlBase + "/Rules/:id/instances/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#patchOrCreate
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#updateOrCreate
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#update
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#destroyById
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#removeById
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#patchAttributes
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleInstance` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.RuleInstance#modelName
        * @propertyOf apiServices.RuleInstance
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RuleInstance`.
        */
        R.modelName = "RuleInstance";

    /**
     * @ngdoc object
     * @name apiServices.RuleInstance.listeners
     * @header apiServices.RuleInstance.listeners
     * @object
     * @description
     *
     * The object `RuleInstance.listeners` groups methods
     * manipulating `Listener` instances related to `RuleInstance`.
     *
     * Call {@link apiServices.RuleInstance#listeners RuleInstance.listeners()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#listeners
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Queries listeners of RuleInstance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R.listeners = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::get::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#count
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Counts listeners of RuleInstance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.listeners.count = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::count::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#create
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Creates a new instance in listeners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R.listeners.create = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::create::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#createMany
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Creates a new instance in listeners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R.listeners.createMany = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::createMany::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#destroyAll
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Deletes all listeners of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.listeners.destroyAll = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::delete::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#destroyById
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Delete a related item by id for listeners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for listeners
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.listeners.destroyById = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::destroyById::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#exists
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Check the existence of listeners relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for listeners
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R.listeners.exists = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::exists::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#findById
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Find a related item by id for listeners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for listeners
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R.listeners.findById = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::findById::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#link
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Add a related item by id for listeners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for listeners
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R.listeners.link = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::link::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#unlink
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Remove the listeners relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for listeners
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.listeners.unlink = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::unlink::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance.listeners#updateById
             * @methodOf apiServices.RuleInstance.listeners
             *
             * @description
             *
             * Update a related item by id for listeners.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for listeners
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Listener` object.)
             * </em>
             */
        R.listeners.updateById = function() {
          var TargetResource = $injector.get("Listener");
          var action = TargetResource["::updateById::RuleInstance::listeners"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#customer
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::RuleInstance::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#Rule
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Fetches belongsTo relation Rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.Rule = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::get::RuleInstance::Rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleInstance#lastModifiedBy
             * @methodOf apiServices.RuleInstance
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::RuleInstance::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.RuleHistory
 * @header apiServices.RuleHistory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RuleHistory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RuleHistory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/RuleHistories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RuleHistory.author() instead.
            "prototype$__get__author": {
              url: urlBase + "/RuleHistories/:id/author",
              method: "GET",
            },

            // INTERNAL. Use RuleHistory.rule() instead.
            "prototype$__get__rule": {
              url: urlBase + "/RuleHistories/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use RuleHistory.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/RuleHistories/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#create
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RuleHistories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#createMany
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RuleHistories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#upsert
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RuleHistories",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#replaceOrCreate
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/RuleHistories/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#exists
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RuleHistories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#findById
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RuleHistories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#replaceById
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/RuleHistories/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#find
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RuleHistories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#findOne
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RuleHistories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#updateAll
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RuleHistories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#deleteById
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RuleHistories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#count
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RuleHistories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#prototype$updateAttributes
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RuleHistories/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#createChangeStream
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RuleHistories/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Rule.historic.findById() instead.
            "::findById::Rule::historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/historic/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rule.historic.destroyById() instead.
            "::destroyById::Rule::historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/historic/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rule.historic.updateById() instead.
            "::updateById::Rule::historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Rules/:id/historic/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rule.historic() instead.
            "::get::Rule::historic": {
              isArray: true,
              url: urlBase + "/Rules/:id/historic",
              method: "GET",
            },

            // INTERNAL. Use Rule.historic.create() instead.
            "::create::Rule::historic": {
              url: urlBase + "/Rules/:id/historic",
              method: "POST",
            },

            // INTERNAL. Use Rule.historic.createMany() instead.
            "::createMany::Rule::historic": {
              isArray: true,
              url: urlBase + "/Rules/:id/historic",
              method: "POST",
            },

            // INTERNAL. Use Rule.historic.destroyAll() instead.
            "::delete::Rule::historic": {
              url: urlBase + "/Rules/:id/historic",
              method: "DELETE",
            },

            // INTERNAL. Use Rule.historic.count() instead.
            "::count::Rule::historic": {
              url: urlBase + "/Rules/:id/historic/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#patchOrCreate
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#updateOrCreate
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#update
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#destroyById
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#removeById
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#patchAttributes
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RuleHistory` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.RuleHistory#modelName
        * @propertyOf apiServices.RuleHistory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RuleHistory`.
        */
        R.modelName = "RuleHistory";


            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#author
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Fetches belongsTo relation author.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.author = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::RuleHistory::author"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#rule
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Fetches belongsTo relation rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::get::RuleHistory::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.RuleHistory#lastModifiedBy
             * @methodOf apiServices.RuleHistory
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::RuleHistory::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.ScoreUnit
 * @header apiServices.ScoreUnit
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ScoreUnit` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ScoreUnit",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ScoreUnits/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ScoreUnit.levels.findById() instead.
            "prototype$__findById__levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/levels/:fk",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.levels.destroyById() instead.
            "prototype$__destroyById__levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/levels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.levels.updateById() instead.
            "prototype$__updateById__levels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/levels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ScoreUnit.seats.findById() instead.
            "prototype$__findById__seats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/seats/:fk",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.seats.destroyById() instead.
            "prototype$__destroyById__seats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/seats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.seats.updateById() instead.
            "prototype$__updateById__seats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/seats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ScoreUnit.instances.findById() instead.
            "prototype$__findById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.instances.destroyById() instead.
            "prototype$__destroyById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.instances.updateById() instead.
            "prototype$__updateById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ScoreUnit.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/ScoreUnits/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.levels() instead.
            "prototype$__get__levels": {
              isArray: true,
              url: urlBase + "/ScoreUnits/:id/levels",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.levels.create() instead.
            "prototype$__create__levels": {
              url: urlBase + "/ScoreUnits/:id/levels",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.levels.destroyAll() instead.
            "prototype$__delete__levels": {
              url: urlBase + "/ScoreUnits/:id/levels",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.levels.count() instead.
            "prototype$__count__levels": {
              url: urlBase + "/ScoreUnits/:id/levels/count",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.seats() instead.
            "prototype$__get__seats": {
              isArray: true,
              url: urlBase + "/ScoreUnits/:id/seats",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.seats.create() instead.
            "prototype$__create__seats": {
              url: urlBase + "/ScoreUnits/:id/seats",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.seats.destroyAll() instead.
            "prototype$__delete__seats": {
              url: urlBase + "/ScoreUnits/:id/seats",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.seats.count() instead.
            "prototype$__count__seats": {
              url: urlBase + "/ScoreUnits/:id/seats/count",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.instances() instead.
            "prototype$__get__instances": {
              isArray: true,
              url: urlBase + "/ScoreUnits/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.instances.create() instead.
            "prototype$__create__instances": {
              url: urlBase + "/ScoreUnits/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.instances.destroyAll() instead.
            "prototype$__delete__instances": {
              url: urlBase + "/ScoreUnits/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.instances.count() instead.
            "prototype$__count__instances": {
              url: urlBase + "/ScoreUnits/:id/instances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#create
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ScoreUnits",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#createMany
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ScoreUnits",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#upsert
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ScoreUnits",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#replaceOrCreate
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ScoreUnits/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#exists
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ScoreUnits/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#findById
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ScoreUnits/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#replaceById
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ScoreUnits/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#find
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ScoreUnits",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#findOne
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ScoreUnits/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#updateAll
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ScoreUnits/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#deleteById
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ScoreUnits/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#count
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ScoreUnits/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#prototype$updateAttributes
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ScoreUnits/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#createChangeStream
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ScoreUnits/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Level.scoreUnit() instead.
            "::get::Level::scoreUnit": {
              url: urlBase + "/Levels/:id/scoreUnit",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitSeat.scoreUnit() instead.
            "::get::ScoreUnitSeat::scoreUnit": {
              url: urlBase + "/ScoreUnitSeats/:id/scoreUnit",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitInstance.scoreUnit() instead.
            "::get::ScoreUnitInstance::scoreUnit": {
              url: urlBase + "/ScoreUnitInstances/:id/scoreUnit",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#patchOrCreate
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#updateOrCreate
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#update
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#destroyById
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#removeById
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#patchAttributes
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.ScoreUnit#modelName
        * @propertyOf apiServices.ScoreUnit
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ScoreUnit`.
        */
        R.modelName = "ScoreUnit";

    /**
     * @ngdoc object
     * @name apiServices.ScoreUnit.levels
     * @header apiServices.ScoreUnit.levels
     * @object
     * @description
     *
     * The object `ScoreUnit.levels` groups methods
     * manipulating `Level` instances related to `ScoreUnit`.
     *
     * Call {@link apiServices.ScoreUnit#levels ScoreUnit.levels()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#levels
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Queries levels of ScoreUnit.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::get::ScoreUnit::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.levels#count
             * @methodOf apiServices.ScoreUnit.levels
             *
             * @description
             *
             * Counts levels of ScoreUnit.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.levels.count = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::count::ScoreUnit::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.levels#create
             * @methodOf apiServices.ScoreUnit.levels
             *
             * @description
             *
             * Creates a new instance in levels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.create = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::create::ScoreUnit::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.levels#createMany
             * @methodOf apiServices.ScoreUnit.levels
             *
             * @description
             *
             * Creates a new instance in levels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.createMany = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::createMany::ScoreUnit::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.levels#destroyAll
             * @methodOf apiServices.ScoreUnit.levels
             *
             * @description
             *
             * Deletes all levels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levels.destroyAll = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::delete::ScoreUnit::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.levels#destroyById
             * @methodOf apiServices.ScoreUnit.levels
             *
             * @description
             *
             * Delete a related item by id for levels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levels.destroyById = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::destroyById::ScoreUnit::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.levels#findById
             * @methodOf apiServices.ScoreUnit.levels
             *
             * @description
             *
             * Find a related item by id for levels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.findById = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::findById::ScoreUnit::levels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.levels#updateById
             * @methodOf apiServices.ScoreUnit.levels
             *
             * @description
             *
             * Update a related item by id for levels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.levels.updateById = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::updateById::ScoreUnit::levels"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.ScoreUnit.seats
     * @header apiServices.ScoreUnit.seats
     * @object
     * @description
     *
     * The object `ScoreUnit.seats` groups methods
     * manipulating `ScoreUnitSeat` instances related to `ScoreUnit`.
     *
     * Call {@link apiServices.ScoreUnit#seats ScoreUnit.seats()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#seats
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Queries seats of ScoreUnit.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R.seats = function() {
          var TargetResource = $injector.get("ScoreUnitSeat");
          var action = TargetResource["::get::ScoreUnit::seats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.seats#count
             * @methodOf apiServices.ScoreUnit.seats
             *
             * @description
             *
             * Counts seats of ScoreUnit.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.seats.count = function() {
          var TargetResource = $injector.get("ScoreUnitSeat");
          var action = TargetResource["::count::ScoreUnit::seats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.seats#create
             * @methodOf apiServices.ScoreUnit.seats
             *
             * @description
             *
             * Creates a new instance in seats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R.seats.create = function() {
          var TargetResource = $injector.get("ScoreUnitSeat");
          var action = TargetResource["::create::ScoreUnit::seats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.seats#createMany
             * @methodOf apiServices.ScoreUnit.seats
             *
             * @description
             *
             * Creates a new instance in seats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R.seats.createMany = function() {
          var TargetResource = $injector.get("ScoreUnitSeat");
          var action = TargetResource["::createMany::ScoreUnit::seats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.seats#destroyAll
             * @methodOf apiServices.ScoreUnit.seats
             *
             * @description
             *
             * Deletes all seats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.seats.destroyAll = function() {
          var TargetResource = $injector.get("ScoreUnitSeat");
          var action = TargetResource["::delete::ScoreUnit::seats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.seats#destroyById
             * @methodOf apiServices.ScoreUnit.seats
             *
             * @description
             *
             * Delete a related item by id for seats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for seats
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.seats.destroyById = function() {
          var TargetResource = $injector.get("ScoreUnitSeat");
          var action = TargetResource["::destroyById::ScoreUnit::seats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.seats#findById
             * @methodOf apiServices.ScoreUnit.seats
             *
             * @description
             *
             * Find a related item by id for seats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for seats
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R.seats.findById = function() {
          var TargetResource = $injector.get("ScoreUnitSeat");
          var action = TargetResource["::findById::ScoreUnit::seats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.seats#updateById
             * @methodOf apiServices.ScoreUnit.seats
             *
             * @description
             *
             * Update a related item by id for seats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for seats
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R.seats.updateById = function() {
          var TargetResource = $injector.get("ScoreUnitSeat");
          var action = TargetResource["::updateById::ScoreUnit::seats"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.ScoreUnit.instances
     * @header apiServices.ScoreUnit.instances
     * @object
     * @description
     *
     * The object `ScoreUnit.instances` groups methods
     * manipulating `ScoreUnitInstance` instances related to `ScoreUnit`.
     *
     * Call {@link apiServices.ScoreUnit#instances ScoreUnit.instances()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#instances
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Queries instances of ScoreUnit.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::get::ScoreUnit::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.instances#count
             * @methodOf apiServices.ScoreUnit.instances
             *
             * @description
             *
             * Counts instances of ScoreUnit.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.instances.count = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::count::ScoreUnit::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.instances#create
             * @methodOf apiServices.ScoreUnit.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances.create = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::create::ScoreUnit::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.instances#createMany
             * @methodOf apiServices.ScoreUnit.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances.createMany = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::createMany::ScoreUnit::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.instances#destroyAll
             * @methodOf apiServices.ScoreUnit.instances
             *
             * @description
             *
             * Deletes all instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyAll = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::delete::ScoreUnit::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.instances#destroyById
             * @methodOf apiServices.ScoreUnit.instances
             *
             * @description
             *
             * Delete a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyById = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::destroyById::ScoreUnit::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.instances#findById
             * @methodOf apiServices.ScoreUnit.instances
             *
             * @description
             *
             * Find a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances.findById = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::findById::ScoreUnit::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit.instances#updateById
             * @methodOf apiServices.ScoreUnit.instances
             *
             * @description
             *
             * Update a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R.instances.updateById = function() {
          var TargetResource = $injector.get("ScoreUnitInstance");
          var action = TargetResource["::updateById::ScoreUnit::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnit#lastModifiedBy
             * @methodOf apiServices.ScoreUnit
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::ScoreUnit::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.ScoreUnitSeat
 * @header apiServices.ScoreUnitSeat
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ScoreUnitSeat` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ScoreUnitSeat",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ScoreUnitSeats/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ScoreUnitSeat.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/ScoreUnitSeats/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitSeat.scoreUnit() instead.
            "prototype$__get__scoreUnit": {
              url: urlBase + "/ScoreUnitSeats/:id/scoreUnit",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitSeat.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/ScoreUnitSeats/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#create
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ScoreUnitSeats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#createMany
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ScoreUnitSeats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#upsert
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ScoreUnitSeats",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#replaceOrCreate
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ScoreUnitSeats/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#exists
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ScoreUnitSeats/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#findById
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ScoreUnitSeats/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#replaceById
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ScoreUnitSeats/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#find
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ScoreUnitSeats",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#findOne
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ScoreUnitSeats/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#updateAll
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ScoreUnitSeats/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#deleteById
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ScoreUnitSeats/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#count
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ScoreUnitSeats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#prototype$updateAttributes
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ScoreUnitSeats/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#createChangeStream
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ScoreUnitSeats/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.seats.findById() instead.
            "::findById::ScoreUnit::seats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/seats/:fk",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.seats.destroyById() instead.
            "::destroyById::ScoreUnit::seats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/seats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.seats.updateById() instead.
            "::updateById::ScoreUnit::seats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/seats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ScoreUnit.seats() instead.
            "::get::ScoreUnit::seats": {
              isArray: true,
              url: urlBase + "/ScoreUnits/:id/seats",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.seats.create() instead.
            "::create::ScoreUnit::seats": {
              url: urlBase + "/ScoreUnits/:id/seats",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.seats.createMany() instead.
            "::createMany::ScoreUnit::seats": {
              isArray: true,
              url: urlBase + "/ScoreUnits/:id/seats",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.seats.destroyAll() instead.
            "::delete::ScoreUnit::seats": {
              url: urlBase + "/ScoreUnits/:id/seats",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.seats.count() instead.
            "::count::ScoreUnit::seats": {
              url: urlBase + "/ScoreUnits/:id/seats/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#patchOrCreate
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#updateOrCreate
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#update
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#destroyById
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#removeById
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#patchAttributes
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitSeat` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.ScoreUnitSeat#modelName
        * @propertyOf apiServices.ScoreUnitSeat
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ScoreUnitSeat`.
        */
        R.modelName = "ScoreUnitSeat";


            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#customer
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::ScoreUnitSeat::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#scoreUnit
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Fetches belongsTo relation scoreUnit.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
        R.scoreUnit = function() {
          var TargetResource = $injector.get("ScoreUnit");
          var action = TargetResource["::get::ScoreUnitSeat::scoreUnit"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitSeat#lastModifiedBy
             * @methodOf apiServices.ScoreUnitSeat
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::ScoreUnitSeat::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.ScoreUnitInstance
 * @header apiServices.ScoreUnitInstance
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ScoreUnitInstance` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ScoreUnitInstance",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ScoreUnitInstances/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ScoreUnitInstance.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/ScoreUnitInstances/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitInstance.scoreUnit() instead.
            "prototype$__get__scoreUnit": {
              url: urlBase + "/ScoreUnitInstances/:id/scoreUnit",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitInstance.level() instead.
            "prototype$__get__level": {
              url: urlBase + "/ScoreUnitInstances/:id/level",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnitInstance.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/ScoreUnitInstances/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#create
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ScoreUnitInstances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#createMany
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ScoreUnitInstances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#upsert
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ScoreUnitInstances",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#replaceOrCreate
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ScoreUnitInstances/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#exists
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ScoreUnitInstances/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#findById
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ScoreUnitInstances/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#replaceById
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ScoreUnitInstances/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#find
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ScoreUnitInstances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#findOne
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ScoreUnitInstances/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#updateAll
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ScoreUnitInstances/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#deleteById
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ScoreUnitInstances/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#count
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ScoreUnitInstances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#prototype$updateAttributes
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ScoreUnitInstances/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#createChangeStream
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ScoreUnitInstances/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.findById() instead.
            "::findById::Customer::scoreUnitInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/scoreUnitInstances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.destroyById() instead.
            "::destroyById::Customer::scoreUnitInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/scoreUnitInstances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.updateById() instead.
            "::updateById::Customer::scoreUnitInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/scoreUnitInstances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.scoreUnitInstances() instead.
            "::get::Customer::scoreUnitInstances": {
              isArray: true,
              url: urlBase + "/Customers/:id/scoreUnitInstances",
              method: "GET",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.create() instead.
            "::create::Customer::scoreUnitInstances": {
              url: urlBase + "/Customers/:id/scoreUnitInstances",
              method: "POST",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.createMany() instead.
            "::createMany::Customer::scoreUnitInstances": {
              isArray: true,
              url: urlBase + "/Customers/:id/scoreUnitInstances",
              method: "POST",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.destroyAll() instead.
            "::delete::Customer::scoreUnitInstances": {
              url: urlBase + "/Customers/:id/scoreUnitInstances",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.scoreUnitInstances.count() instead.
            "::count::Customer::scoreUnitInstances": {
              url: urlBase + "/Customers/:id/scoreUnitInstances/count",
              method: "GET",
            },

            // INTERNAL. Use Level.instances.findById() instead.
            "::findById::Level::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Levels/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Level.instances.destroyById() instead.
            "::destroyById::Level::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Levels/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Level.instances.updateById() instead.
            "::updateById::Level::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Levels/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Level.instances() instead.
            "::get::Level::instances": {
              isArray: true,
              url: urlBase + "/Levels/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use Level.instances.create() instead.
            "::create::Level::instances": {
              url: urlBase + "/Levels/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Level.instances.createMany() instead.
            "::createMany::Level::instances": {
              isArray: true,
              url: urlBase + "/Levels/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Level.instances.destroyAll() instead.
            "::delete::Level::instances": {
              url: urlBase + "/Levels/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use Level.instances.count() instead.
            "::count::Level::instances": {
              url: urlBase + "/Levels/:id/instances/count",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.instances.findById() instead.
            "::findById::ScoreUnit::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.instances.destroyById() instead.
            "::destroyById::ScoreUnit::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.instances.updateById() instead.
            "::updateById::ScoreUnit::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ScoreUnits/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ScoreUnit.instances() instead.
            "::get::ScoreUnit::instances": {
              isArray: true,
              url: urlBase + "/ScoreUnits/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use ScoreUnit.instances.create() instead.
            "::create::ScoreUnit::instances": {
              url: urlBase + "/ScoreUnits/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.instances.createMany() instead.
            "::createMany::ScoreUnit::instances": {
              isArray: true,
              url: urlBase + "/ScoreUnits/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use ScoreUnit.instances.destroyAll() instead.
            "::delete::ScoreUnit::instances": {
              url: urlBase + "/ScoreUnits/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use ScoreUnit.instances.count() instead.
            "::count::ScoreUnit::instances": {
              url: urlBase + "/ScoreUnits/:id/instances/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#patchOrCreate
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#updateOrCreate
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#update
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#destroyById
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#removeById
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#patchAttributes
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnitInstance` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.ScoreUnitInstance#modelName
        * @propertyOf apiServices.ScoreUnitInstance
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ScoreUnitInstance`.
        */
        R.modelName = "ScoreUnitInstance";


            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#customer
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::ScoreUnitInstance::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#scoreUnit
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Fetches belongsTo relation scoreUnit.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ScoreUnit` object.)
             * </em>
             */
        R.scoreUnit = function() {
          var TargetResource = $injector.get("ScoreUnit");
          var action = TargetResource["::get::ScoreUnitInstance::scoreUnit"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#level
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Fetches belongsTo relation level.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Level` object.)
             * </em>
             */
        R.level = function() {
          var TargetResource = $injector.get("Level");
          var action = TargetResource["::get::ScoreUnitInstance::level"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.ScoreUnitInstance#lastModifiedBy
             * @methodOf apiServices.ScoreUnitInstance
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Instance id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::ScoreUnitInstance::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Segment
 * @header apiServices.Segment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Segment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Segment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Segments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Segment.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Segments/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#create
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Segments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#createMany
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Segments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#upsert
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Segments",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#replaceOrCreate
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Segments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#exists
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Segments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#findById
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Segments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#replaceById
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Segments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#find
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Segments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#findOne
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Segments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#updateAll
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Segments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#deleteById
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Segments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#count
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Segments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#prototype$updateAttributes
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Segments/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Segment#createChangeStream
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Segments/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Segment#patchOrCreate
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Segment#updateOrCreate
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Segment#update
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Segment#destroyById
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Segment#removeById
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Segment#patchAttributes
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Segment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Segment#modelName
        * @propertyOf apiServices.Segment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Segment`.
        */
        R.modelName = "Segment";


            /**
             * @ngdoc method
             * @name apiServices.Segment#lastModifiedBy
             * @methodOf apiServices.Segment
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Segment::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Quest
 * @header apiServices.Quest
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Quest` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Quest",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Quests/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Quest._triggers.findById() instead.
            "prototype$__findById___triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_triggers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Quest._triggers.destroyById() instead.
            "prototype$__destroyById___triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_triggers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Quest._triggers.updateById() instead.
            "prototype$__updateById___triggers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_triggers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Quest._steps.findById() instead.
            "prototype$__findById___steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_steps/:fk",
              method: "GET",
            },

            // INTERNAL. Use Quest._steps.destroyById() instead.
            "prototype$__destroyById___steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_steps/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Quest._steps.updateById() instead.
            "prototype$__updateById___steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_steps/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Quest.historic.findById() instead.
            "prototype$__findById__historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/historic/:fk",
              method: "GET",
            },

            // INTERNAL. Use Quest.historic.destroyById() instead.
            "prototype$__destroyById__historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/historic/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Quest.historic.updateById() instead.
            "prototype$__updateById__historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/historic/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Quest.instances.findById() instead.
            "prototype$__findById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Quest.instances.destroyById() instead.
            "prototype$__destroyById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Quest.instances.updateById() instead.
            "prototype$__updateById__instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Quest.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Quests/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use Quest._triggers() instead.
            "prototype$__get___triggers": {
              isArray: true,
              url: urlBase + "/Quests/:id/_triggers",
              method: "GET",
            },

            // INTERNAL. Use Quest._triggers.create() instead.
            "prototype$__create___triggers": {
              url: urlBase + "/Quests/:id/_triggers",
              method: "POST",
            },

            // INTERNAL. Use Quest._triggers.destroyAll() instead.
            "prototype$__delete___triggers": {
              url: urlBase + "/Quests/:id/_triggers",
              method: "DELETE",
            },

            // INTERNAL. Use Quest._triggers.count() instead.
            "prototype$__count___triggers": {
              url: urlBase + "/Quests/:id/_triggers/count",
              method: "GET",
            },

            // INTERNAL. Use Quest._steps() instead.
            "prototype$__get___steps": {
              isArray: true,
              url: urlBase + "/Quests/:id/_steps",
              method: "GET",
            },

            // INTERNAL. Use Quest._steps.create() instead.
            "prototype$__create___steps": {
              url: urlBase + "/Quests/:id/_steps",
              method: "POST",
            },

            // INTERNAL. Use Quest._steps.destroyAll() instead.
            "prototype$__delete___steps": {
              url: urlBase + "/Quests/:id/_steps",
              method: "DELETE",
            },

            // INTERNAL. Use Quest._steps.count() instead.
            "prototype$__count___steps": {
              url: urlBase + "/Quests/:id/_steps/count",
              method: "GET",
            },

            // INTERNAL. Use Quest.historic() instead.
            "prototype$__get__historic": {
              isArray: true,
              url: urlBase + "/Quests/:id/historic",
              method: "GET",
            },

            // INTERNAL. Use Quest.historic.create() instead.
            "prototype$__create__historic": {
              url: urlBase + "/Quests/:id/historic",
              method: "POST",
            },

            // INTERNAL. Use Quest.historic.destroyAll() instead.
            "prototype$__delete__historic": {
              url: urlBase + "/Quests/:id/historic",
              method: "DELETE",
            },

            // INTERNAL. Use Quest.historic.count() instead.
            "prototype$__count__historic": {
              url: urlBase + "/Quests/:id/historic/count",
              method: "GET",
            },

            // INTERNAL. Use Quest.instances() instead.
            "prototype$__get__instances": {
              isArray: true,
              url: urlBase + "/Quests/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use Quest.instances.create() instead.
            "prototype$__create__instances": {
              url: urlBase + "/Quests/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Quest.instances.destroyAll() instead.
            "prototype$__delete__instances": {
              url: urlBase + "/Quests/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use Quest.instances.count() instead.
            "prototype$__count__instances": {
              url: urlBase + "/Quests/:id/instances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#create
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Quests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#createMany
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Quests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#upsert
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Quests",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#replaceOrCreate
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Quests/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#exists
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Quests/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#findById
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Quests/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#replaceById
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Quests/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#find
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Quests",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#findOne
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Quests/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#updateAll
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Quests/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#deleteById
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Quests/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#count
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Quests/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#prototype$updateAttributes
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Quests/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#createChangeStream
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Quests/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Quest#prototype$join
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
            "prototype$join": {
              url: urlBase + "/Quests/:id/join",
              method: "POST",
            },

            // INTERNAL. Use Customer.quests.findById() instead.
            "::findById::Customer::quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.quests.destroyById() instead.
            "::destroyById::Customer::quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.quests.updateById() instead.
            "::updateById::Customer::quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.quests.link() instead.
            "::link::Customer::quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.quests.unlink() instead.
            "::unlink::Customer::quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.quests.exists() instead.
            "::exists::Customer::quests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/quests/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Customer.quests() instead.
            "::get::Customer::quests": {
              isArray: true,
              url: urlBase + "/Customers/:id/quests",
              method: "GET",
            },

            // INTERNAL. Use Customer.quests.create() instead.
            "::create::Customer::quests": {
              url: urlBase + "/Customers/:id/quests",
              method: "POST",
            },

            // INTERNAL. Use Customer.quests.createMany() instead.
            "::createMany::Customer::quests": {
              isArray: true,
              url: urlBase + "/Customers/:id/quests",
              method: "POST",
            },

            // INTERNAL. Use Customer.quests.destroyAll() instead.
            "::delete::Customer::quests": {
              url: urlBase + "/Customers/:id/quests",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.quests.count() instead.
            "::count::Customer::quests": {
              url: urlBase + "/Customers/:id/quests/count",
              method: "GET",
            },

            // INTERNAL. Use Trigger.quest() instead.
            "::get::Trigger::quest": {
              url: urlBase + "/Triggers/:id/quest",
              method: "GET",
            },

            // INTERNAL. Use Step.quest() instead.
            "::get::Step::quest": {
              url: urlBase + "/Steps/:id/quest",
              method: "GET",
            },

            // INTERNAL. Use QuestHistory.quest() instead.
            "::get::QuestHistory::quest": {
              url: urlBase + "/QuestHistories/:id/quest",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.Quest() instead.
            "::get::QuestInstance::Quest": {
              url: urlBase + "/QuestInstances/:id/Quest",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Quest#patchOrCreate
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Quest#updateOrCreate
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Quest#update
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Quest#destroyById
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Quest#removeById
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Quest#patchAttributes
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Quest#modelName
        * @propertyOf apiServices.Quest
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Quest`.
        */
        R.modelName = "Quest";

    /**
     * @ngdoc object
     * @name apiServices.Quest._triggers
     * @header apiServices.Quest._triggers
     * @object
     * @description
     *
     * The object `Quest._triggers` groups methods
     * manipulating `Trigger` instances related to `Quest`.
     *
     * Call {@link apiServices.Quest#_triggers Quest._triggers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Quest#_triggers
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Queries _triggers of Quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::get::Quest::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._triggers#count
             * @methodOf apiServices.Quest._triggers
             *
             * @description
             *
             * Counts _triggers of Quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R._triggers.count = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::count::Quest::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._triggers#create
             * @methodOf apiServices.Quest._triggers
             *
             * @description
             *
             * Creates a new instance in _triggers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers.create = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::create::Quest::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._triggers#createMany
             * @methodOf apiServices.Quest._triggers
             *
             * @description
             *
             * Creates a new instance in _triggers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers.createMany = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::createMany::Quest::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._triggers#destroyAll
             * @methodOf apiServices.Quest._triggers
             *
             * @description
             *
             * Deletes all _triggers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R._triggers.destroyAll = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::delete::Quest::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._triggers#destroyById
             * @methodOf apiServices.Quest._triggers
             *
             * @description
             *
             * Delete a related item by id for _triggers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _triggers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R._triggers.destroyById = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::destroyById::Quest::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._triggers#findById
             * @methodOf apiServices.Quest._triggers
             *
             * @description
             *
             * Find a related item by id for _triggers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _triggers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers.findById = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::findById::Quest::_triggers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._triggers#updateById
             * @methodOf apiServices.Quest._triggers
             *
             * @description
             *
             * Update a related item by id for _triggers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _triggers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trigger` object.)
             * </em>
             */
        R._triggers.updateById = function() {
          var TargetResource = $injector.get("Trigger");
          var action = TargetResource["::updateById::Quest::_triggers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Quest._steps
     * @header apiServices.Quest._steps
     * @object
     * @description
     *
     * The object `Quest._steps` groups methods
     * manipulating `Step` instances related to `Quest`.
     *
     * Call {@link apiServices.Quest#_steps Quest._steps()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Quest#_steps
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Queries _steps of Quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R._steps = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::get::Quest::_steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._steps#count
             * @methodOf apiServices.Quest._steps
             *
             * @description
             *
             * Counts _steps of Quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R._steps.count = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::count::Quest::_steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._steps#create
             * @methodOf apiServices.Quest._steps
             *
             * @description
             *
             * Creates a new instance in _steps of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R._steps.create = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::create::Quest::_steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._steps#createMany
             * @methodOf apiServices.Quest._steps
             *
             * @description
             *
             * Creates a new instance in _steps of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R._steps.createMany = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::createMany::Quest::_steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._steps#destroyAll
             * @methodOf apiServices.Quest._steps
             *
             * @description
             *
             * Deletes all _steps of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R._steps.destroyAll = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::delete::Quest::_steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._steps#destroyById
             * @methodOf apiServices.Quest._steps
             *
             * @description
             *
             * Delete a related item by id for _steps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _steps
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R._steps.destroyById = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::destroyById::Quest::_steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._steps#findById
             * @methodOf apiServices.Quest._steps
             *
             * @description
             *
             * Find a related item by id for _steps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _steps
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R._steps.findById = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::findById::Quest::_steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest._steps#updateById
             * @methodOf apiServices.Quest._steps
             *
             * @description
             *
             * Update a related item by id for _steps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for _steps
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R._steps.updateById = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::updateById::Quest::_steps"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Quest.historic
     * @header apiServices.Quest.historic
     * @object
     * @description
     *
     * The object `Quest.historic` groups methods
     * manipulating `QuestHistory` instances related to `Quest`.
     *
     * Call {@link apiServices.Quest#historic Quest.historic()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Quest#historic
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Queries historic of Quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R.historic = function() {
          var TargetResource = $injector.get("QuestHistory");
          var action = TargetResource["::get::Quest::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.historic#count
             * @methodOf apiServices.Quest.historic
             *
             * @description
             *
             * Counts historic of Quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.historic.count = function() {
          var TargetResource = $injector.get("QuestHistory");
          var action = TargetResource["::count::Quest::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.historic#create
             * @methodOf apiServices.Quest.historic
             *
             * @description
             *
             * Creates a new instance in historic of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R.historic.create = function() {
          var TargetResource = $injector.get("QuestHistory");
          var action = TargetResource["::create::Quest::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.historic#createMany
             * @methodOf apiServices.Quest.historic
             *
             * @description
             *
             * Creates a new instance in historic of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R.historic.createMany = function() {
          var TargetResource = $injector.get("QuestHistory");
          var action = TargetResource["::createMany::Quest::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.historic#destroyAll
             * @methodOf apiServices.Quest.historic
             *
             * @description
             *
             * Deletes all historic of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.historic.destroyAll = function() {
          var TargetResource = $injector.get("QuestHistory");
          var action = TargetResource["::delete::Quest::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.historic#destroyById
             * @methodOf apiServices.Quest.historic
             *
             * @description
             *
             * Delete a related item by id for historic.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for historic
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.historic.destroyById = function() {
          var TargetResource = $injector.get("QuestHistory");
          var action = TargetResource["::destroyById::Quest::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.historic#findById
             * @methodOf apiServices.Quest.historic
             *
             * @description
             *
             * Find a related item by id for historic.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for historic
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R.historic.findById = function() {
          var TargetResource = $injector.get("QuestHistory");
          var action = TargetResource["::findById::Quest::historic"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.historic#updateById
             * @methodOf apiServices.Quest.historic
             *
             * @description
             *
             * Update a related item by id for historic.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for historic
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R.historic.updateById = function() {
          var TargetResource = $injector.get("QuestHistory");
          var action = TargetResource["::updateById::Quest::historic"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Quest.instances
     * @header apiServices.Quest.instances
     * @object
     * @description
     *
     * The object `Quest.instances` groups methods
     * manipulating `QuestInstance` instances related to `Quest`.
     *
     * Call {@link apiServices.Quest#instances Quest.instances()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Quest#instances
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Queries instances of Quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.instances = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::get::Quest::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.instances#count
             * @methodOf apiServices.Quest.instances
             *
             * @description
             *
             * Counts instances of Quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.instances.count = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::count::Quest::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.instances#create
             * @methodOf apiServices.Quest.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.instances.create = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::create::Quest::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.instances#createMany
             * @methodOf apiServices.Quest.instances
             *
             * @description
             *
             * Creates a new instance in instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.instances.createMany = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::createMany::Quest::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.instances#destroyAll
             * @methodOf apiServices.Quest.instances
             *
             * @description
             *
             * Deletes all instances of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyAll = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::delete::Quest::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.instances#destroyById
             * @methodOf apiServices.Quest.instances
             *
             * @description
             *
             * Delete a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.instances.destroyById = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::destroyById::Quest::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.instances#findById
             * @methodOf apiServices.Quest.instances
             *
             * @description
             *
             * Find a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.instances.findById = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::findById::Quest::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest.instances#updateById
             * @methodOf apiServices.Quest.instances
             *
             * @description
             *
             * Update a related item by id for instances.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R.instances.updateById = function() {
          var TargetResource = $injector.get("QuestInstance");
          var action = TargetResource["::updateById::Quest::instances"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Quest#lastModifiedBy
             * @methodOf apiServices.Quest
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Quest::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Step
 * @header apiServices.Step
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Step` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Step",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Steps/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Step.quest() instead.
            "prototype$__get__quest": {
              url: urlBase + "/Steps/:id/quest",
              method: "GET",
            },

            // INTERNAL. Use Step.rule() instead.
            "prototype$__get__rule": {
              url: urlBase + "/Steps/:id/rule",
              method: "GET",
            },

            // INTERNAL. Use Step.rule.create() instead.
            "prototype$__create__rule": {
              url: urlBase + "/Steps/:id/rule",
              method: "POST",
            },

            // INTERNAL. Use Step.rule.update() instead.
            "prototype$__update__rule": {
              url: urlBase + "/Steps/:id/rule",
              method: "PUT",
            },

            // INTERNAL. Use Step.rule.destroy() instead.
            "prototype$__destroy__rule": {
              url: urlBase + "/Steps/:id/rule",
              method: "DELETE",
            },

            // INTERNAL. Use Step.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Steps/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#create
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Steps",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#createMany
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Steps",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#upsert
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Steps",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#replaceOrCreate
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Steps/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#exists
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Steps/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#findById
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Steps/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#replaceById
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Steps/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#find
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Steps",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#findOne
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Steps/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#updateAll
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Steps/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#deleteById
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Steps/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#count
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Steps/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#prototype$updateAttributes
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Steps/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Step#createChangeStream
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Steps/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Quest._steps.findById() instead.
            "::findById::Quest::_steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_steps/:fk",
              method: "GET",
            },

            // INTERNAL. Use Quest._steps.destroyById() instead.
            "::destroyById::Quest::_steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_steps/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Quest._steps.updateById() instead.
            "::updateById::Quest::_steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/_steps/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Quest._steps() instead.
            "::get::Quest::_steps": {
              isArray: true,
              url: urlBase + "/Quests/:id/_steps",
              method: "GET",
            },

            // INTERNAL. Use Quest._steps.create() instead.
            "::create::Quest::_steps": {
              url: urlBase + "/Quests/:id/_steps",
              method: "POST",
            },

            // INTERNAL. Use Quest._steps.createMany() instead.
            "::createMany::Quest::_steps": {
              isArray: true,
              url: urlBase + "/Quests/:id/_steps",
              method: "POST",
            },

            // INTERNAL. Use Quest._steps.destroyAll() instead.
            "::delete::Quest::_steps": {
              url: urlBase + "/Quests/:id/_steps",
              method: "DELETE",
            },

            // INTERNAL. Use Quest._steps.count() instead.
            "::count::Quest::_steps": {
              url: urlBase + "/Quests/:id/_steps/count",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.steps.findById() instead.
            "::findById::QuestInstance::steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/:fk",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.steps.destroyById() instead.
            "::destroyById::QuestInstance::steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use QuestInstance.steps.updateById() instead.
            "::updateById::QuestInstance::steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/:fk",
              method: "PUT",
            },

            // INTERNAL. Use QuestInstance.steps.link() instead.
            "::link::QuestInstance::steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use QuestInstance.steps.unlink() instead.
            "::unlink::QuestInstance::steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use QuestInstance.steps.exists() instead.
            "::exists::QuestInstance::steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use QuestInstance.steps() instead.
            "::get::QuestInstance::steps": {
              isArray: true,
              url: urlBase + "/QuestInstances/:id/steps",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.steps.create() instead.
            "::create::QuestInstance::steps": {
              url: urlBase + "/QuestInstances/:id/steps",
              method: "POST",
            },

            // INTERNAL. Use QuestInstance.steps.createMany() instead.
            "::createMany::QuestInstance::steps": {
              isArray: true,
              url: urlBase + "/QuestInstances/:id/steps",
              method: "POST",
            },

            // INTERNAL. Use QuestInstance.steps.destroyAll() instead.
            "::delete::QuestInstance::steps": {
              url: urlBase + "/QuestInstances/:id/steps",
              method: "DELETE",
            },

            // INTERNAL. Use QuestInstance.steps.count() instead.
            "::count::QuestInstance::steps": {
              url: urlBase + "/QuestInstances/:id/steps/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Step#patchOrCreate
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Step#updateOrCreate
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Step#update
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Step#destroyById
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Step#removeById
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Step#patchAttributes
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Step#modelName
        * @propertyOf apiServices.Step
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Step`.
        */
        R.modelName = "Step";


            /**
             * @ngdoc method
             * @name apiServices.Step#quest
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Fetches belongsTo relation quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quest = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::get::Step::quest"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name apiServices.Step.rule
     * @header apiServices.Step.rule
     * @object
     * @description
     *
     * The object `Step.rule` groups methods
     * manipulating `Rule` instances related to `Step`.
     *
     * Call {@link apiServices.Step#rule Step.rule()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.Step#rule
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Fetches hasOne relation rule.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::get::Step::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Step.rule#create
             * @methodOf apiServices.Step.rule
             *
             * @description
             *
             * Creates a new instance in rule of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule.create = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::create::Step::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Step.rule#createMany
             * @methodOf apiServices.Step.rule
             *
             * @description
             *
             * Creates a new instance in rule of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule.createMany = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::createMany::Step::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Step.rule#destroy
             * @methodOf apiServices.Step.rule
             *
             * @description
             *
             * Deletes rule of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rule.destroy = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::destroy::Step::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Step.rule#update
             * @methodOf apiServices.Step.rule
             *
             * @description
             *
             * Update rule of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rule` object.)
             * </em>
             */
        R.rule.update = function() {
          var TargetResource = $injector.get("Rule");
          var action = TargetResource["::update::Step::rule"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.Step#lastModifiedBy
             * @methodOf apiServices.Step
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Step::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.QuestHistory
 * @header apiServices.QuestHistory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `QuestHistory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "QuestHistory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/QuestHistories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use QuestHistory.author() instead.
            "prototype$__get__author": {
              url: urlBase + "/QuestHistories/:id/author",
              method: "GET",
            },

            // INTERNAL. Use QuestHistory.quest() instead.
            "prototype$__get__quest": {
              url: urlBase + "/QuestHistories/:id/quest",
              method: "GET",
            },

            // INTERNAL. Use QuestHistory.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/QuestHistories/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#create
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/QuestHistories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#createMany
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/QuestHistories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#upsert
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/QuestHistories",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#replaceOrCreate
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/QuestHistories/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#exists
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/QuestHistories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#findById
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/QuestHistories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#replaceById
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/QuestHistories/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#find
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/QuestHistories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#findOne
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/QuestHistories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#updateAll
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/QuestHistories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#deleteById
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/QuestHistories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#count
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/QuestHistories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#prototype$updateAttributes
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/QuestHistories/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#createChangeStream
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/QuestHistories/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Quest.historic.findById() instead.
            "::findById::Quest::historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/historic/:fk",
              method: "GET",
            },

            // INTERNAL. Use Quest.historic.destroyById() instead.
            "::destroyById::Quest::historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/historic/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Quest.historic.updateById() instead.
            "::updateById::Quest::historic": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/historic/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Quest.historic() instead.
            "::get::Quest::historic": {
              isArray: true,
              url: urlBase + "/Quests/:id/historic",
              method: "GET",
            },

            // INTERNAL. Use Quest.historic.create() instead.
            "::create::Quest::historic": {
              url: urlBase + "/Quests/:id/historic",
              method: "POST",
            },

            // INTERNAL. Use Quest.historic.createMany() instead.
            "::createMany::Quest::historic": {
              isArray: true,
              url: urlBase + "/Quests/:id/historic",
              method: "POST",
            },

            // INTERNAL. Use Quest.historic.destroyAll() instead.
            "::delete::Quest::historic": {
              url: urlBase + "/Quests/:id/historic",
              method: "DELETE",
            },

            // INTERNAL. Use Quest.historic.count() instead.
            "::count::Quest::historic": {
              url: urlBase + "/Quests/:id/historic/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#patchOrCreate
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#updateOrCreate
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#update
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#destroyById
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#removeById
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#patchAttributes
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestHistory` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.QuestHistory#modelName
        * @propertyOf apiServices.QuestHistory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `QuestHistory`.
        */
        R.modelName = "QuestHistory";


            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#author
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Fetches belongsTo relation author.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.author = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::QuestHistory::author"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#quest
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Fetches belongsTo relation quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.quest = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::get::QuestHistory::quest"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestHistory#lastModifiedBy
             * @methodOf apiServices.QuestHistory
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::QuestHistory::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.QuestInstance
 * @header apiServices.QuestInstance
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `QuestInstance` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "QuestInstance",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/QuestInstances/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use QuestInstance.steps.findById() instead.
            "prototype$__findById__steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/:fk",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.steps.destroyById() instead.
            "prototype$__destroyById__steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use QuestInstance.steps.updateById() instead.
            "prototype$__updateById__steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/:fk",
              method: "PUT",
            },

            // INTERNAL. Use QuestInstance.steps.link() instead.
            "prototype$__link__steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use QuestInstance.steps.unlink() instead.
            "prototype$__unlink__steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use QuestInstance.steps.exists() instead.
            "prototype$__exists__steps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QuestInstances/:id/steps/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use QuestInstance.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/QuestInstances/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.Quest() instead.
            "prototype$__get__Quest": {
              url: urlBase + "/QuestInstances/:id/Quest",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/QuestInstances/:id/lastModifiedBy",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.steps() instead.
            "prototype$__get__steps": {
              isArray: true,
              url: urlBase + "/QuestInstances/:id/steps",
              method: "GET",
            },

            // INTERNAL. Use QuestInstance.steps.create() instead.
            "prototype$__create__steps": {
              url: urlBase + "/QuestInstances/:id/steps",
              method: "POST",
            },

            // INTERNAL. Use QuestInstance.steps.destroyAll() instead.
            "prototype$__delete__steps": {
              url: urlBase + "/QuestInstances/:id/steps",
              method: "DELETE",
            },

            // INTERNAL. Use QuestInstance.steps.count() instead.
            "prototype$__count__steps": {
              url: urlBase + "/QuestInstances/:id/steps/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#create
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/QuestInstances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#createMany
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/QuestInstances",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#upsert
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/QuestInstances",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#replaceOrCreate
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/QuestInstances/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#exists
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/QuestInstances/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#findById
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/QuestInstances/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#replaceById
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/QuestInstances/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#find
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/QuestInstances",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#findOne
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/QuestInstances/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#updateAll
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/QuestInstances/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#deleteById
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/QuestInstances/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#count
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/QuestInstances/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#prototype$updateAttributes
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/QuestInstances/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#createChangeStream
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/QuestInstances/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Customer.questInstances.findById() instead.
            "::findById::Customer::questInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/questInstances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.questInstances.destroyById() instead.
            "::destroyById::Customer::questInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/questInstances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.questInstances.updateById() instead.
            "::updateById::Customer::questInstances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/questInstances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.questInstances() instead.
            "::get::Customer::questInstances": {
              isArray: true,
              url: urlBase + "/Customers/:id/questInstances",
              method: "GET",
            },

            // INTERNAL. Use Customer.questInstances.create() instead.
            "::create::Customer::questInstances": {
              url: urlBase + "/Customers/:id/questInstances",
              method: "POST",
            },

            // INTERNAL. Use Customer.questInstances.createMany() instead.
            "::createMany::Customer::questInstances": {
              isArray: true,
              url: urlBase + "/Customers/:id/questInstances",
              method: "POST",
            },

            // INTERNAL. Use Customer.questInstances.destroyAll() instead.
            "::delete::Customer::questInstances": {
              url: urlBase + "/Customers/:id/questInstances",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.questInstances.count() instead.
            "::count::Customer::questInstances": {
              url: urlBase + "/Customers/:id/questInstances/count",
              method: "GET",
            },

            // INTERNAL. Use Quest.instances.findById() instead.
            "::findById::Quest::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/instances/:fk",
              method: "GET",
            },

            // INTERNAL. Use Quest.instances.destroyById() instead.
            "::destroyById::Quest::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/instances/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Quest.instances.updateById() instead.
            "::updateById::Quest::instances": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Quests/:id/instances/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Quest.instances() instead.
            "::get::Quest::instances": {
              isArray: true,
              url: urlBase + "/Quests/:id/instances",
              method: "GET",
            },

            // INTERNAL. Use Quest.instances.create() instead.
            "::create::Quest::instances": {
              url: urlBase + "/Quests/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Quest.instances.createMany() instead.
            "::createMany::Quest::instances": {
              isArray: true,
              url: urlBase + "/Quests/:id/instances",
              method: "POST",
            },

            // INTERNAL. Use Quest.instances.destroyAll() instead.
            "::delete::Quest::instances": {
              url: urlBase + "/Quests/:id/instances",
              method: "DELETE",
            },

            // INTERNAL. Use Quest.instances.count() instead.
            "::count::Quest::instances": {
              url: urlBase + "/Quests/:id/instances/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#patchOrCreate
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#updateOrCreate
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#update
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#destroyById
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#removeById
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#patchAttributes
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QuestInstance` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.QuestInstance#modelName
        * @propertyOf apiServices.QuestInstance
        * @description
        * The name of the model represented by this $resource,
        * i.e. `QuestInstance`.
        */
        R.modelName = "QuestInstance";

    /**
     * @ngdoc object
     * @name apiServices.QuestInstance.steps
     * @header apiServices.QuestInstance.steps
     * @object
     * @description
     *
     * The object `QuestInstance.steps` groups methods
     * manipulating `Step` instances related to `QuestInstance`.
     *
     * Call {@link apiServices.QuestInstance#steps QuestInstance.steps()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#steps
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Queries steps of QuestInstance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R.steps = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::get::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#count
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Counts steps of QuestInstance.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.steps.count = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::count::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#create
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Creates a new instance in steps of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R.steps.create = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::create::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#createMany
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Creates a new instance in steps of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R.steps.createMany = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::createMany::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#destroyAll
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Deletes all steps of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.steps.destroyAll = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::delete::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#destroyById
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Delete a related item by id for steps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for steps
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.steps.destroyById = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::destroyById::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#exists
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Check the existence of steps relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for steps
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R.steps.exists = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::exists::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#findById
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Find a related item by id for steps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for steps
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R.steps.findById = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::findById::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#link
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Add a related item by id for steps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for steps
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R.steps.link = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::link::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#unlink
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Remove the steps relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for steps
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.steps.unlink = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::unlink::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance.steps#updateById
             * @methodOf apiServices.QuestInstance.steps
             *
             * @description
             *
             * Update a related item by id for steps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for steps
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Step` object.)
             * </em>
             */
        R.steps.updateById = function() {
          var TargetResource = $injector.get("Step");
          var action = TargetResource["::updateById::QuestInstance::steps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#customer
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::QuestInstance::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#Quest
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Fetches belongsTo relation Quest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Quest` object.)
             * </em>
             */
        R.Quest = function() {
          var TargetResource = $injector.get("Quest");
          var action = TargetResource["::get::QuestInstance::Quest"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name apiServices.QuestInstance#lastModifiedBy
             * @methodOf apiServices.QuestInstance
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::QuestInstance::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Log
 * @header apiServices.Log
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Log` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Log",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Logs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Log.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Logs/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#create
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Logs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#createMany
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Logs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#upsert
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Logs",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#replaceOrCreate
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Logs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#exists
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Logs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#findById
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Logs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#replaceById
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Logs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#find
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Logs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#findOne
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Logs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#updateAll
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Logs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#deleteById
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Logs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#count
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Logs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#prototype$updateAttributes
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Logs/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Log#createChangeStream
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Logs/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Log#patchOrCreate
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Log#updateOrCreate
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Log#update
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Log#destroyById
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Log#removeById
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Log#patchAttributes
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Log` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Log#modelName
        * @propertyOf apiServices.Log
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Log`.
        */
        R.modelName = "Log";


            /**
             * @ngdoc method
             * @name apiServices.Log#lastModifiedBy
             * @methodOf apiServices.Log
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Log::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name apiServices.Widget
 * @header apiServices.Widget
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Widget` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Widget",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Widgets/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Widget.lastModifiedBy() instead.
            "prototype$__get__lastModifiedBy": {
              url: urlBase + "/Widgets/:id/lastModifiedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#create
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Widgets",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#createMany
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Widgets",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#upsert
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Widgets",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#replaceOrCreate
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Widgets/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#exists
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Widgets/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#findById
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Widgets/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#replaceById
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Widgets/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#find
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Widgets",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#findOne
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Widgets/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#updateAll
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Widgets/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#deleteById
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Widgets/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#count
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Widgets/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#prototype$updateAttributes
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Widgets/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name apiServices.Widget#createChangeStream
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Widgets/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name apiServices.Widget#patchOrCreate
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Widget#updateOrCreate
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name apiServices.Widget#update
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name apiServices.Widget#destroyById
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Widget#removeById
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name apiServices.Widget#patchAttributes
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Widget` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name apiServices.Widget#modelName
        * @propertyOf apiServices.Widget
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Widget`.
        */
        R.modelName = "Widget";


            /**
             * @ngdoc method
             * @name apiServices.Widget#lastModifiedBy
             * @methodOf apiServices.Widget
             *
             * @description
             *
             * Fetches belongsTo relation lastModifiedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.lastModifiedBy = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::Widget::lastModifiedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name apiServices.LoopBackResourceProvider
   * @header apiServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name apiServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf apiServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name apiServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf apiServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name apiServices.LoopBackResourceProvider#setUrlBase
     * @methodOf apiServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name apiServices.LoopBackResourceProvider#getUrlBase
     * @methodOf apiServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
